"""
Binance Wallet REST API

OpenAPI Specification for the Binance Wallet REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_wallet.rest_api.api import AssetApi
from binance_sdk_wallet.rest_api.models import AssetDetailResponse
from binance_sdk_wallet.rest_api.models import AssetDividendRecordResponse
from binance_sdk_wallet.rest_api.models import DustTransferResponse
from binance_sdk_wallet.rest_api.models import DustlogResponse
from binance_sdk_wallet.rest_api.models import FundingWalletResponse
from binance_sdk_wallet.rest_api.models import (
    GetAssetsThatCanBeConvertedIntoBnbResponse,
)
from binance_sdk_wallet.rest_api.models import (
    GetCloudMiningPaymentAndRefundHistoryResponse,
)
from binance_sdk_wallet.rest_api.models import GetOpenSymbolListResponse
from binance_sdk_wallet.rest_api.models import QueryUserDelegationHistoryResponse
from binance_sdk_wallet.rest_api.models import QueryUserUniversalTransferHistoryResponse
from binance_sdk_wallet.rest_api.models import QueryUserWalletBalanceResponse
from binance_sdk_wallet.rest_api.models import (
    ToggleBnbBurnOnSpotTradeAndMarginInterestResponse,
)
from binance_sdk_wallet.rest_api.models import TradeFeeResponse
from binance_sdk_wallet.rest_api.models import UserAssetResponse
from binance_sdk_wallet.rest_api.models import UserUniversalTransferResponse


class TestAssetApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = AssetApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_asset_detail_success(self, mock_get_signature):
        """Test asset_detail() successfully with required parameters only."""

        expected_response = {
            "CTR": {
                "minWithdrawAmount": "70.00000000",
                "depositStatus": False,
                "withdrawFee": 35,
                "withdrawStatus": True,
                "depositTip": "Delisted, Deposit Suspended",
            },
            "SKY": {
                "minWithdrawAmount": "0.02000000",
                "depositStatus": True,
                "withdrawFee": 0.01,
                "withdrawStatus": True,
            },
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.asset_detail()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/assetDetail" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AssetDetailResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(AssetDetailResponse, "from_dict"):
            expected = AssetDetailResponse.from_dict(expected_response)
        else:
            expected = AssetDetailResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_asset_detail_success_with_optional_params(self, mock_get_signature):
        """Test asset_detail() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "CTR": {
                "minWithdrawAmount": "70.00000000",
                "depositStatus": False,
                "withdrawFee": 35,
                "withdrawStatus": True,
                "depositTip": "Delisted, Deposit Suspended",
            },
            "SKY": {
                "minWithdrawAmount": "0.02000000",
                "depositStatus": True,
                "withdrawFee": 0.01,
                "withdrawStatus": True,
            },
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.asset_detail(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/assetDetail" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AssetDetailResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(AssetDetailResponse, "from_dict"):
            expected = AssetDetailResponse.from_dict(expected_response)
        else:
            expected = AssetDetailResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_asset_detail_server_error(self):
        """Test that asset_detail() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.asset_detail = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.asset_detail()

    @patch("binance_common.utils.get_signature")
    def test_asset_dividend_record_success(self, mock_get_signature):
        """Test asset_dividend_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "id": 1637366104,
                    "amount": "10.00000000",
                    "asset": "BHFT",
                    "divTime": 1563189166000,
                    "enInfo": "BHFT distribution",
                    "tranId": 2968885920,
                },
                {
                    "id": 1631750237,
                    "amount": "10.00000000",
                    "asset": "BHFT",
                    "divTime": 1563189165000,
                    "enInfo": "BHFT distribution",
                    "tranId": 2968885920,
                },
            ],
            "total": 2,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.asset_dividend_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/assetDividend" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AssetDividendRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(AssetDividendRecordResponse, "from_dict"):
            expected = AssetDividendRecordResponse.from_dict(expected_response)
        else:
            expected = AssetDividendRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_asset_dividend_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test asset_dividend_record() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "limit": 7,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "id": 1637366104,
                    "amount": "10.00000000",
                    "asset": "BHFT",
                    "divTime": 1563189166000,
                    "enInfo": "BHFT distribution",
                    "tranId": 2968885920,
                },
                {
                    "id": 1631750237,
                    "amount": "10.00000000",
                    "asset": "BHFT",
                    "divTime": 1563189165000,
                    "enInfo": "BHFT distribution",
                    "tranId": 2968885920,
                },
            ],
            "total": 2,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.asset_dividend_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/assetDividend" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(AssetDividendRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(AssetDividendRecordResponse, "from_dict"):
            expected = AssetDividendRecordResponse.from_dict(expected_response)
        else:
            expected = AssetDividendRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_asset_dividend_record_server_error(self):
        """Test that asset_dividend_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.asset_dividend_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.asset_dividend_record()

    @patch("binance_common.utils.get_signature")
    def test_dust_transfer_success(self, mock_get_signature):
        """Test dust_transfer() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
        }

        expected_response = {
            "totalServiceCharge": "0.02102542",
            "totalTransfered": "1.05127099",
            "transferResult": [
                {
                    "amount": "0.03000000",
                    "fromAsset": "ETH",
                    "operateTime": 1563368549307,
                    "serviceChargeAmount": "0.00500000",
                    "tranId": 2970932918,
                    "transferedAmount": "0.25000000",
                },
                {
                    "amount": "0.09000000",
                    "fromAsset": "LTC",
                    "operateTime": 1563368549404,
                    "serviceChargeAmount": "0.01548000",
                    "tranId": 2970932918,
                    "transferedAmount": "0.77400000",
                },
                {
                    "amount": "248.61878453",
                    "fromAsset": "TRX",
                    "operateTime": 1563368549489,
                    "serviceChargeAmount": "0.00054542",
                    "tranId": 2970932918,
                    "transferedAmount": "0.02727099",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.dust_transfer(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/dust" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["asset"] == "asset_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(DustTransferResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(DustTransferResponse, "from_dict"):
            expected = DustTransferResponse.from_dict(expected_response)
        else:
            expected = DustTransferResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_dust_transfer_success_with_optional_params(self, mock_get_signature):
        """Test dust_transfer() successfully with optional parameters."""

        params = {"asset": "asset_example", "account_type": "SPOT", "recv_window": 5000}

        expected_response = {
            "totalServiceCharge": "0.02102542",
            "totalTransfered": "1.05127099",
            "transferResult": [
                {
                    "amount": "0.03000000",
                    "fromAsset": "ETH",
                    "operateTime": 1563368549307,
                    "serviceChargeAmount": "0.00500000",
                    "tranId": 2970932918,
                    "transferedAmount": "0.25000000",
                },
                {
                    "amount": "0.09000000",
                    "fromAsset": "LTC",
                    "operateTime": 1563368549404,
                    "serviceChargeAmount": "0.01548000",
                    "tranId": 2970932918,
                    "transferedAmount": "0.77400000",
                },
                {
                    "amount": "248.61878453",
                    "fromAsset": "TRX",
                    "operateTime": 1563368549489,
                    "serviceChargeAmount": "0.00054542",
                    "tranId": 2970932918,
                    "transferedAmount": "0.02727099",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.dust_transfer(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/dust" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(DustTransferResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(DustTransferResponse, "from_dict"):
            expected = DustTransferResponse.from_dict(expected_response)
        else:
            expected = DustTransferResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_dust_transfer_missing_required_param_asset(self):
        """Test that dust_transfer() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.dust_transfer(**params)

    def test_dust_transfer_server_error(self):
        """Test that dust_transfer() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
        }

        mock_error = Exception("ResponseError")
        self.client.dust_transfer = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.dust_transfer(**params)

    @patch("binance_common.utils.get_signature")
    def test_dustlog_success(self, mock_get_signature):
        """Test dustlog() successfully with required parameters only."""

        expected_response = {
            "total": 8,
            "userAssetDribblets": [
                {
                    "operateTime": 1615985535000,
                    "totalTransferedAmount": "0.00132256",
                    "totalServiceChargeAmount": "0.00002699",
                    "transId": 45178372831,
                    "userAssetDribbletDetails": [
                        {
                            "transId": 4359321,
                            "serviceChargeAmount": "0.000009",
                            "amount": "0.0009",
                            "operateTime": 1615985535000,
                            "transferedAmount": "0.000441",
                            "fromAsset": "USDT",
                        },
                        {
                            "transId": 4359321,
                            "serviceChargeAmount": "0.00001799",
                            "amount": "0.0009",
                            "operateTime": 1615985535000,
                            "transferedAmount": "0.00088156",
                            "fromAsset": "ETH",
                        },
                    ],
                },
                {
                    "operateTime": 1616203180000,
                    "totalTransferedAmount": "0.00058795",
                    "totalServiceChargeAmount": "0.000012",
                    "transId": 4357015,
                    "userAssetDribbletDetails": [
                        {
                            "transId": 4357015,
                            "serviceChargeAmount": "0.00001",
                            "amount": "0.001",
                            "operateTime": 1616203180000,
                            "transferedAmount": "0.00049",
                            "fromAsset": "USDT",
                        },
                        {
                            "transId": 4357015,
                            "serviceChargeAmount": "0.000002",
                            "amount": "0.0001",
                            "operateTime": 1616203180000,
                            "transferedAmount": "0.00009795",
                            "fromAsset": "ETH",
                        },
                    ],
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.dustlog()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/dribblet" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(DustlogResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(DustlogResponse, "from_dict"):
            expected = DustlogResponse.from_dict(expected_response)
        else:
            expected = DustlogResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_dustlog_success_with_optional_params(self, mock_get_signature):
        """Test dustlog() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "total": 8,
            "userAssetDribblets": [
                {
                    "operateTime": 1615985535000,
                    "totalTransferedAmount": "0.00132256",
                    "totalServiceChargeAmount": "0.00002699",
                    "transId": 45178372831,
                    "userAssetDribbletDetails": [
                        {
                            "transId": 4359321,
                            "serviceChargeAmount": "0.000009",
                            "amount": "0.0009",
                            "operateTime": 1615985535000,
                            "transferedAmount": "0.000441",
                            "fromAsset": "USDT",
                        },
                        {
                            "transId": 4359321,
                            "serviceChargeAmount": "0.00001799",
                            "amount": "0.0009",
                            "operateTime": 1615985535000,
                            "transferedAmount": "0.00088156",
                            "fromAsset": "ETH",
                        },
                    ],
                },
                {
                    "operateTime": 1616203180000,
                    "totalTransferedAmount": "0.00058795",
                    "totalServiceChargeAmount": "0.000012",
                    "transId": 4357015,
                    "userAssetDribbletDetails": [
                        {
                            "transId": 4357015,
                            "serviceChargeAmount": "0.00001",
                            "amount": "0.001",
                            "operateTime": 1616203180000,
                            "transferedAmount": "0.00049",
                            "fromAsset": "USDT",
                        },
                        {
                            "transId": 4357015,
                            "serviceChargeAmount": "0.000002",
                            "amount": "0.0001",
                            "operateTime": 1616203180000,
                            "transferedAmount": "0.00009795",
                            "fromAsset": "ETH",
                        },
                    ],
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.dustlog(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/dribblet" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(DustlogResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(DustlogResponse, "from_dict"):
            expected = DustlogResponse.from_dict(expected_response)
        else:
            expected = DustlogResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_dustlog_server_error(self):
        """Test that dustlog() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.dustlog = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.dustlog()

    @patch("binance_common.utils.get_signature")
    def test_funding_wallet_success(self, mock_get_signature):
        """Test funding_wallet() successfully with required parameters only."""

        expected_response = [
            {
                "asset": "USDT",
                "free": "1",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "btcValuation": "0.00000091",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.funding_wallet()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/get-funding-asset" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundingWalletResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(FundingWalletResponse, "from_dict"):
            expected = FundingWalletResponse.from_dict(expected_response)
        else:
            expected = FundingWalletResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_funding_wallet_success_with_optional_params(self, mock_get_signature):
        """Test funding_wallet() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "need_btc_valuation": "need_btc_valuation_example",
            "recv_window": 5000,
        }

        expected_response = [
            {
                "asset": "USDT",
                "free": "1",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "btcValuation": "0.00000091",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.funding_wallet(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/get-funding-asset" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundingWalletResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(FundingWalletResponse, "from_dict"):
            expected = FundingWalletResponse.from_dict(expected_response)
        else:
            expected = FundingWalletResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_funding_wallet_server_error(self):
        """Test that funding_wallet() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.funding_wallet = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.funding_wallet()

    @patch("binance_common.utils.get_signature")
    def test_get_assets_that_can_be_converted_into_bnb_success(
        self, mock_get_signature
    ):
        """Test get_assets_that_can_be_converted_into_bnb() successfully with required parameters only."""

        expected_response = {
            "details": [
                {
                    "asset": "ADA",
                    "assetFullName": "ADA",
                    "amountFree": "6.21",
                    "toBTC": "0.00016848",
                    "toBNB": "0.01777302",
                    "toBNBOffExchange": "0.01741756",
                    "exchange": "0.00035546",
                }
            ],
            "totalTransferBtc": "0.00016848",
            "totalTransferBNB": "0.01777302",
            "dribbletPercentage": "0.02",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_assets_that_can_be_converted_into_bnb()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/dust-btc" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetAssetsThatCanBeConvertedIntoBnbResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetAssetsThatCanBeConvertedIntoBnbResponse, "from_dict")
        ):
            expected = GetAssetsThatCanBeConvertedIntoBnbResponse.from_dict(
                expected_response
            )
        else:
            expected = GetAssetsThatCanBeConvertedIntoBnbResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_assets_that_can_be_converted_into_bnb_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_assets_that_can_be_converted_into_bnb() successfully with optional parameters."""

        params = {"account_type": "SPOT", "recv_window": 5000}

        expected_response = {
            "details": [
                {
                    "asset": "ADA",
                    "assetFullName": "ADA",
                    "amountFree": "6.21",
                    "toBTC": "0.00016848",
                    "toBNB": "0.01777302",
                    "toBNBOffExchange": "0.01741756",
                    "exchange": "0.00035546",
                }
            ],
            "totalTransferBtc": "0.00016848",
            "totalTransferBNB": "0.01777302",
            "dribbletPercentage": "0.02",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_assets_that_can_be_converted_into_bnb(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/dust-btc" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetAssetsThatCanBeConvertedIntoBnbResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetAssetsThatCanBeConvertedIntoBnbResponse, "from_dict")
        ):
            expected = GetAssetsThatCanBeConvertedIntoBnbResponse.from_dict(
                expected_response
            )
        else:
            expected = GetAssetsThatCanBeConvertedIntoBnbResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_assets_that_can_be_converted_into_bnb_server_error(self):
        """Test that get_assets_that_can_be_converted_into_bnb() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_assets_that_can_be_converted_into_bnb = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_assets_that_can_be_converted_into_bnb()

    @patch("binance_common.utils.get_signature")
    def test_get_cloud_mining_payment_and_refund_history_success(
        self, mock_get_signature
    ):
        """Test get_cloud_mining_payment_and_refund_history() successfully with required parameters only."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "total": 5,
            "rows": [
                {
                    "createTime": 1667880112000,
                    "tranId": 121230610120,
                    "type": 248,
                    "asset": "USDT",
                    "amount": "25.0068",
                    "status": "S",
                },
                {
                    "createTime": 1666776366000,
                    "tranId": 119991507468,
                    "type": 249,
                    "asset": "USDT",
                    "amount": "0.027",
                    "status": "S",
                },
                {
                    "createTime": 1666764505000,
                    "tranId": 119977966327,
                    "type": 248,
                    "asset": "USDT",
                    "amount": "0.027",
                    "status": "S",
                },
                {
                    "createTime": 1666758189000,
                    "tranId": 119973601721,
                    "type": 248,
                    "asset": "USDT",
                    "amount": "0.018",
                    "status": "S",
                },
                {
                    "createTime": 1666757278000,
                    "tranId": 119973028551,
                    "type": 248,
                    "asset": "USDT",
                    "amount": "0.018",
                    "status": "S",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_cloud_mining_payment_and_refund_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCloudMiningPaymentAndRefundHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetCloudMiningPaymentAndRefundHistoryResponse, "from_dict")
        ):
            expected = GetCloudMiningPaymentAndRefundHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetCloudMiningPaymentAndRefundHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_cloud_mining_payment_and_refund_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_cloud_mining_payment_and_refund_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "tran_id": 1,
            "client_tran_id": "1",
            "asset": "asset_example",
            "current": 1,
            "size": 10,
        }

        expected_response = {
            "total": 5,
            "rows": [
                {
                    "createTime": 1667880112000,
                    "tranId": 121230610120,
                    "type": 248,
                    "asset": "USDT",
                    "amount": "25.0068",
                    "status": "S",
                },
                {
                    "createTime": 1666776366000,
                    "tranId": 119991507468,
                    "type": 249,
                    "asset": "USDT",
                    "amount": "0.027",
                    "status": "S",
                },
                {
                    "createTime": 1666764505000,
                    "tranId": 119977966327,
                    "type": 248,
                    "asset": "USDT",
                    "amount": "0.027",
                    "status": "S",
                },
                {
                    "createTime": 1666758189000,
                    "tranId": 119973601721,
                    "type": 248,
                    "asset": "USDT",
                    "amount": "0.018",
                    "status": "S",
                },
                {
                    "createTime": 1666757278000,
                    "tranId": 119973028551,
                    "type": 248,
                    "asset": "USDT",
                    "amount": "0.018",
                    "status": "S",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_cloud_mining_payment_and_refund_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetCloudMiningPaymentAndRefundHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetCloudMiningPaymentAndRefundHistoryResponse, "from_dict")
        ):
            expected = GetCloudMiningPaymentAndRefundHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetCloudMiningPaymentAndRefundHistoryResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_cloud_mining_payment_and_refund_history_missing_required_param_start_time(
        self,
    ):
        """Test that get_cloud_mining_payment_and_refund_history() raises RequiredError when 'start_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.get_cloud_mining_payment_and_refund_history(**params)

    def test_get_cloud_mining_payment_and_refund_history_missing_required_param_end_time(
        self,
    ):
        """Test that get_cloud_mining_payment_and_refund_history() raises RequiredError when 'end_time' is missing."""
        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.get_cloud_mining_payment_and_refund_history(**params)

    def test_get_cloud_mining_payment_and_refund_history_server_error(self):
        """Test that get_cloud_mining_payment_and_refund_history() raises an error when the server returns an error."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.get_cloud_mining_payment_and_refund_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_cloud_mining_payment_and_refund_history(**params)

    def test_get_open_symbol_list_success(self):
        """Test get_open_symbol_list() successfully with required parameters only."""

        expected_response = [
            {"openTime": 1686161202000, "symbols": ["BNBBTC", "BNBETH"]},
            {"openTime": 1686222232000, "symbols": ["BTCUSDT"]},
        ]

        self.set_mock_response(expected_response)

        response = self.client.get_open_symbol_list()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()

        assert "url" in request_kwargs
        assert "/sapi/v1/spot/open-symbol-list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOpenSymbolListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(GetOpenSymbolListResponse, "from_dict"):
            expected = GetOpenSymbolListResponse.from_dict(expected_response)
        else:
            expected = GetOpenSymbolListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_open_symbol_list_server_error(self):
        """Test that get_open_symbol_list() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_open_symbol_list = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_open_symbol_list()

    @patch("binance_common.utils.get_signature")
    def test_query_user_delegation_history_success(self, mock_get_signature):
        """Test query_user_delegation_history() successfully with required parameters only."""

        params = {
            "email": "email_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        expected_response = {
            "total": 3316,
            "rows": [
                {
                    "clientTranId": "293915932290879488",
                    "transferType": "Undelegate",
                    "asset": "ETH",
                    "amount": "1",
                    "time": 1695205406000,
                },
                {
                    "clientTranId": "293915892281413632",
                    "transferType": "Delegate",
                    "asset": "ETH",
                    "amount": "1",
                    "time": 1695205396000,
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_delegation_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/custody/transfer-history" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["email"] == "email_example"
        assert normalized["startTime"] == 1623319461670
        assert normalized["endTime"] == 1641782889000

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserDelegationHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryUserDelegationHistoryResponse, "from_dict")
        ):
            expected = QueryUserDelegationHistoryResponse.from_dict(expected_response)
        else:
            expected = QueryUserDelegationHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_user_delegation_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_user_delegation_history() successfully with optional parameters."""

        params = {
            "email": "email_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "type": "type_example",
            "asset": "asset_example",
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "total": 3316,
            "rows": [
                {
                    "clientTranId": "293915932290879488",
                    "transferType": "Undelegate",
                    "asset": "ETH",
                    "amount": "1",
                    "time": 1695205406000,
                },
                {
                    "clientTranId": "293915892281413632",
                    "transferType": "Delegate",
                    "asset": "ETH",
                    "amount": "1",
                    "time": 1695205396000,
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_delegation_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/custody/transfer-history" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserDelegationHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryUserDelegationHistoryResponse, "from_dict")
        ):
            expected = QueryUserDelegationHistoryResponse.from_dict(expected_response)
        else:
            expected = QueryUserDelegationHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_user_delegation_history_missing_required_param_email(self):
        """Test that query_user_delegation_history() raises RequiredError when 'email' is missing."""
        params = {
            "email": "email_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["email"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'email'"):
            self.client.query_user_delegation_history(**params)

    def test_query_user_delegation_history_missing_required_param_start_time(self):
        """Test that query_user_delegation_history() raises RequiredError when 'start_time' is missing."""
        params = {
            "email": "email_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["start_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'start_time'"
        ):
            self.client.query_user_delegation_history(**params)

    def test_query_user_delegation_history_missing_required_param_end_time(self):
        """Test that query_user_delegation_history() raises RequiredError when 'end_time' is missing."""
        params = {
            "email": "email_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }
        params["end_time"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'end_time'"
        ):
            self.client.query_user_delegation_history(**params)

    def test_query_user_delegation_history_server_error(self):
        """Test that query_user_delegation_history() raises an error when the server returns an error."""

        params = {
            "email": "email_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
        }

        mock_error = Exception("ResponseError")
        self.client.query_user_delegation_history = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_user_delegation_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_user_universal_transfer_history_success(self, mock_get_signature):
        """Test query_user_universal_transfer_history() successfully with required parameters only."""

        params = {
            "type": "type_example",
        }

        expected_response = {
            "total": 2,
            "rows": [
                {
                    "asset": "USDT",
                    "amount": "1",
                    "type": "MAIN_UMFUTURE",
                    "status": "CONFIRMED",
                    "tranId": 11415955596,
                    "timestamp": 1544433328000,
                },
                {
                    "asset": "USDT",
                    "amount": "2",
                    "type": "MAIN_UMFUTURE",
                    "status": "CONFIRMED",
                    "tranId": 11366865406,
                    "timestamp": 1544433328000,
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_universal_transfer_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["type"] == "type_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserUniversalTransferHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryUserUniversalTransferHistoryResponse, "from_dict")
        ):
            expected = QueryUserUniversalTransferHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = QueryUserUniversalTransferHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_user_universal_transfer_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_user_universal_transfer_history() successfully with optional parameters."""

        params = {
            "type": "type_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "from_symbol": "from_symbol_example",
            "to_symbol": "to_symbol_example",
            "recv_window": 5000,
        }

        expected_response = {
            "total": 2,
            "rows": [
                {
                    "asset": "USDT",
                    "amount": "1",
                    "type": "MAIN_UMFUTURE",
                    "status": "CONFIRMED",
                    "tranId": 11415955596,
                    "timestamp": 1544433328000,
                },
                {
                    "asset": "USDT",
                    "amount": "2",
                    "type": "MAIN_UMFUTURE",
                    "status": "CONFIRMED",
                    "tranId": 11366865406,
                    "timestamp": 1544433328000,
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_universal_transfer_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserUniversalTransferHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryUserUniversalTransferHistoryResponse, "from_dict")
        ):
            expected = QueryUserUniversalTransferHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = QueryUserUniversalTransferHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_user_universal_transfer_history_missing_required_param_type(self):
        """Test that query_user_universal_transfer_history() raises RequiredError when 'type' is missing."""
        params = {
            "type": "type_example",
        }
        params["type"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'type'"):
            self.client.query_user_universal_transfer_history(**params)

    def test_query_user_universal_transfer_history_server_error(self):
        """Test that query_user_universal_transfer_history() raises an error when the server returns an error."""

        params = {
            "type": "type_example",
        }

        mock_error = Exception("ResponseError")
        self.client.query_user_universal_transfer_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_user_universal_transfer_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_user_wallet_balance_success(self, mock_get_signature):
        """Test query_user_wallet_balance() successfully with required parameters only."""

        expected_response = [
            {"activate": True, "balance": "0", "walletName": "Spot"},
            {"activate": True, "balance": "0", "walletName": "Funding"},
            {"activate": True, "balance": "0", "walletName": "Cross Margin"},
            {"activate": True, "balance": "0", "walletName": "Isolated Margin"},
            {"activate": True, "balance": "0.71842752", "walletName": "USDⓈ-M Futures"},
            {"activate": True, "balance": "0", "walletName": "COIN-M Futures"},
            {"activate": True, "balance": "0", "walletName": "Earn"},
            {"activate": False, "balance": "0", "walletName": "Options"},
            {"activate": True, "balance": "0", "walletName": "Trading Bots"},
            {"activate": True, "balance": "0", "walletName": "Copy Trading"},
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_wallet_balance()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/wallet/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserWalletBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof or is_list or hasattr(QueryUserWalletBalanceResponse, "from_dict")
        ):
            expected = QueryUserWalletBalanceResponse.from_dict(expected_response)
        else:
            expected = QueryUserWalletBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_user_wallet_balance_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_user_wallet_balance() successfully with optional parameters."""

        params = {"quote_asset": "BTC", "recv_window": 5000}

        expected_response = [
            {"activate": True, "balance": "0", "walletName": "Spot"},
            {"activate": True, "balance": "0", "walletName": "Funding"},
            {"activate": True, "balance": "0", "walletName": "Cross Margin"},
            {"activate": True, "balance": "0", "walletName": "Isolated Margin"},
            {"activate": True, "balance": "0.71842752", "walletName": "USDⓈ-M Futures"},
            {"activate": True, "balance": "0", "walletName": "COIN-M Futures"},
            {"activate": True, "balance": "0", "walletName": "Earn"},
            {"activate": False, "balance": "0", "walletName": "Options"},
            {"activate": True, "balance": "0", "walletName": "Trading Bots"},
            {"activate": True, "balance": "0", "walletName": "Copy Trading"},
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_user_wallet_balance(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/wallet/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryUserWalletBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof or is_list or hasattr(QueryUserWalletBalanceResponse, "from_dict")
        ):
            expected = QueryUserWalletBalanceResponse.from_dict(expected_response)
        else:
            expected = QueryUserWalletBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_user_wallet_balance_server_error(self):
        """Test that query_user_wallet_balance() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_user_wallet_balance = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_user_wallet_balance()

    @patch("binance_common.utils.get_signature")
    def test_toggle_bnb_burn_on_spot_trade_and_margin_interest_success(
        self, mock_get_signature
    ):
        """Test toggle_bnb_burn_on_spot_trade_and_margin_interest() successfully with required parameters only."""

        expected_response = {"spotBNBBurn": True, "interestBNBBurn": False}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.toggle_bnb_burn_on_spot_trade_and_margin_interest()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/bnbBurn" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ToggleBnbBurnOnSpotTradeAndMarginInterestResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(ToggleBnbBurnOnSpotTradeAndMarginInterestResponse, "from_dict")
        ):
            expected = ToggleBnbBurnOnSpotTradeAndMarginInterestResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                ToggleBnbBurnOnSpotTradeAndMarginInterestResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_toggle_bnb_burn_on_spot_trade_and_margin_interest_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test toggle_bnb_burn_on_spot_trade_and_margin_interest() successfully with optional parameters."""

        params = {
            "spot_bnb_burn": "spot_bnb_burn_example",
            "interest_bnb_burn": "interest_bnb_burn_example",
            "recv_window": 5000,
        }

        expected_response = {"spotBNBBurn": True, "interestBNBBurn": False}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.toggle_bnb_burn_on_spot_trade_and_margin_interest(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/bnbBurn" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ToggleBnbBurnOnSpotTradeAndMarginInterestResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(ToggleBnbBurnOnSpotTradeAndMarginInterestResponse, "from_dict")
        ):
            expected = ToggleBnbBurnOnSpotTradeAndMarginInterestResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                ToggleBnbBurnOnSpotTradeAndMarginInterestResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_toggle_bnb_burn_on_spot_trade_and_margin_interest_server_error(self):
        """Test that toggle_bnb_burn_on_spot_trade_and_margin_interest() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.toggle_bnb_burn_on_spot_trade_and_margin_interest = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.toggle_bnb_burn_on_spot_trade_and_margin_interest()

    @patch("binance_common.utils.get_signature")
    def test_trade_fee_success(self, mock_get_signature):
        """Test trade_fee() successfully with required parameters only."""

        expected_response = [
            {
                "symbol": "ADABNB",
                "makerCommission": "0.001",
                "takerCommission": "0.001",
            },
            {
                "symbol": "BNBBTC",
                "makerCommission": "0.001",
                "takerCommission": "0.001",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.trade_fee()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/tradeFee" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(TradeFeeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(TradeFeeResponse, "from_dict"):
            expected = TradeFeeResponse.from_dict(expected_response)
        else:
            expected = TradeFeeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_trade_fee_success_with_optional_params(self, mock_get_signature):
        """Test trade_fee() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = [
            {
                "symbol": "ADABNB",
                "makerCommission": "0.001",
                "takerCommission": "0.001",
            },
            {
                "symbol": "BNBBTC",
                "makerCommission": "0.001",
                "takerCommission": "0.001",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.trade_fee(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/tradeFee" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(TradeFeeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(TradeFeeResponse, "from_dict"):
            expected = TradeFeeResponse.from_dict(expected_response)
        else:
            expected = TradeFeeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_trade_fee_server_error(self):
        """Test that trade_fee() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.trade_fee = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.trade_fee()

    @patch("binance_common.utils.get_signature")
    def test_user_asset_success(self, mock_get_signature):
        """Test user_asset() successfully with required parameters only."""

        expected_response = [
            {
                "asset": "AVAX",
                "free": "1",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "BCH",
                "free": "0.9",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "BNB",
                "free": "887.47061626",
                "locked": "0",
                "freeze": "10.52",
                "withdrawing": "0.1",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "BUSD",
                "free": "9999.7",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "SHIB",
                "free": "532.32",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "USDT",
                "free": "50300000001.44911105",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "WRZ",
                "free": "1",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.user_asset()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v3/asset/getUserAsset" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UserAssetResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(UserAssetResponse, "from_dict"):
            expected = UserAssetResponse.from_dict(expected_response)
        else:
            expected = UserAssetResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_user_asset_success_with_optional_params(self, mock_get_signature):
        """Test user_asset() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "need_btc_valuation": True,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "asset": "AVAX",
                "free": "1",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "BCH",
                "free": "0.9",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "BNB",
                "free": "887.47061626",
                "locked": "0",
                "freeze": "10.52",
                "withdrawing": "0.1",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "BUSD",
                "free": "9999.7",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "SHIB",
                "free": "532.32",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "USDT",
                "free": "50300000001.44911105",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
            {
                "asset": "WRZ",
                "free": "1",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.user_asset(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v3/asset/getUserAsset" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UserAssetResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(UserAssetResponse, "from_dict"):
            expected = UserAssetResponse.from_dict(expected_response)
        else:
            expected = UserAssetResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_user_asset_server_error(self):
        """Test that user_asset() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.user_asset = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.user_asset()

    @patch("binance_common.utils.get_signature")
    def test_user_universal_transfer_success(self, mock_get_signature):
        """Test user_universal_transfer() successfully with required parameters only."""

        params = {
            "type": "type_example",
            "asset": "asset_example",
            "amount": 1.0,
        }

        expected_response = {"tranId": 13526853623}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.user_universal_transfer(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["type"] == "type_example"
        assert normalized["asset"] == "asset_example"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UserUniversalTransferResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(UserUniversalTransferResponse, "from_dict"):
            expected = UserUniversalTransferResponse.from_dict(expected_response)
        else:
            expected = UserUniversalTransferResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_user_universal_transfer_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test user_universal_transfer() successfully with optional parameters."""

        params = {
            "type": "type_example",
            "asset": "asset_example",
            "amount": 1.0,
            "from_symbol": "from_symbol_example",
            "to_symbol": "to_symbol_example",
            "recv_window": 5000,
        }

        expected_response = {"tranId": 13526853623}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.user_universal_transfer(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/asset/transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(UserUniversalTransferResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(UserUniversalTransferResponse, "from_dict"):
            expected = UserUniversalTransferResponse.from_dict(expected_response)
        else:
            expected = UserUniversalTransferResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_user_universal_transfer_missing_required_param_type(self):
        """Test that user_universal_transfer() raises RequiredError when 'type' is missing."""
        params = {
            "type": "type_example",
            "asset": "asset_example",
            "amount": 1.0,
        }
        params["type"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'type'"):
            self.client.user_universal_transfer(**params)

    def test_user_universal_transfer_missing_required_param_asset(self):
        """Test that user_universal_transfer() raises RequiredError when 'asset' is missing."""
        params = {
            "type": "type_example",
            "asset": "asset_example",
            "amount": 1.0,
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.user_universal_transfer(**params)

    def test_user_universal_transfer_missing_required_param_amount(self):
        """Test that user_universal_transfer() raises RequiredError when 'amount' is missing."""
        params = {
            "type": "type_example",
            "asset": "asset_example",
            "amount": 1.0,
        }
        params["amount"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.user_universal_transfer(**params)

    def test_user_universal_transfer_server_error(self):
        """Test that user_universal_transfer() raises an error when the server returns an error."""

        params = {
            "type": "type_example",
            "asset": "asset_example",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.user_universal_transfer = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.user_universal_transfer(**params)
