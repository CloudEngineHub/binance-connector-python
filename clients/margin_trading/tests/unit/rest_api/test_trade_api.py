"""
Binance Margin Trading REST API

OpenAPI Specification for the Binance Margin Trading REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_margin_trading.rest_api.api import TradeApi
from binance_sdk_margin_trading.rest_api.models import CreateSpecialKeyResponse


from binance_sdk_margin_trading.rest_api.models import GetForceLiquidationRecordResponse
from binance_sdk_margin_trading.rest_api.models import (
    GetSmallLiabilityExchangeCoinListResponse,
)
from binance_sdk_margin_trading.rest_api.models import (
    GetSmallLiabilityExchangeHistoryResponse,
)
from binance_sdk_margin_trading.rest_api.models import (
    MarginAccountCancelAllOpenOrdersOnASymbolResponse,
)
from binance_sdk_margin_trading.rest_api.models import MarginAccountCancelOcoResponse
from binance_sdk_margin_trading.rest_api.models import MarginAccountCancelOrderResponse
from binance_sdk_margin_trading.rest_api.models import MarginAccountNewOcoResponse
from binance_sdk_margin_trading.rest_api.models import MarginAccountNewOrderResponse
from binance_sdk_margin_trading.rest_api.models import MarginAccountNewOtoResponse
from binance_sdk_margin_trading.rest_api.models import MarginAccountNewOtocoResponse
from binance_sdk_margin_trading.rest_api.models import MarginManualLiquidationResponse
from binance_sdk_margin_trading.rest_api.models import (
    QueryCurrentMarginOrderCountUsageResponse,
)
from binance_sdk_margin_trading.rest_api.models import QueryMarginAccountsAllOcoResponse
from binance_sdk_margin_trading.rest_api.models import (
    QueryMarginAccountsAllOrdersResponse,
)
from binance_sdk_margin_trading.rest_api.models import QueryMarginAccountsOcoResponse
from binance_sdk_margin_trading.rest_api.models import (
    QueryMarginAccountsOpenOcoResponse,
)
from binance_sdk_margin_trading.rest_api.models import (
    QueryMarginAccountsOpenOrdersResponse,
)
from binance_sdk_margin_trading.rest_api.models import QueryMarginAccountsOrderResponse
from binance_sdk_margin_trading.rest_api.models import (
    QueryMarginAccountsTradeListResponse,
)
from binance_sdk_margin_trading.rest_api.models import QuerySpecialKeyResponse
from binance_sdk_margin_trading.rest_api.models import QuerySpecialKeyListResponse


from binance_sdk_margin_trading.rest_api.models import MarginAccountNewOcoSideEnum
from binance_sdk_margin_trading.rest_api.models import (
    MarginAccountNewOcoNewOrderRespTypeEnum,
)
from binance_sdk_margin_trading.rest_api.models import MarginAccountNewOrderSideEnum
from binance_sdk_margin_trading.rest_api.models import (
    MarginAccountNewOrderNewOrderRespTypeEnum,
)
from binance_sdk_margin_trading.rest_api.models import (
    MarginAccountNewOrderTimeInForceEnum,
)
from binance_sdk_margin_trading.rest_api.models import (
    MarginAccountNewOtoNewOrderRespTypeEnum,
)
from binance_sdk_margin_trading.rest_api.models import (
    MarginAccountNewOtocoNewOrderRespTypeEnum,
)


class TestTradeApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = TradeApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_create_special_key_success(self, mock_get_signature):
        """Test create_special_key() successfully with required parameters only."""

        params = {
            "api_name": "api_name_example",
        }

        expected_response = {
            "apiKey": "npOzOAeLVgr2TuxWfNo43AaPWpBbJEoKezh1o8mSQb6ryE2odE11A4AoVlJbQoGx",
            "secretKey": "87ssWB7azoy6ACRfyp6OVOL5U3rtZptX31QWw2kWjl1jHEYRbyM1pd6qykRBQw8p",
            "type": "HMAC_SHA256",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.create_special_key(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/apiKey" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["apiName"] == "api_name_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(CreateSpecialKeyResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(CreateSpecialKeyResponse, "from_dict"):
            expected = CreateSpecialKeyResponse.from_dict(expected_response)
        else:
            expected = CreateSpecialKeyResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_create_special_key_success_with_optional_params(self, mock_get_signature):
        """Test create_special_key() successfully with optional parameters."""

        params = {
            "api_name": "api_name_example",
            "symbol": "symbol_example",
            "ip": "ip_example",
            "public_key": "public_key_example",
            "permission_mode": "value",
            "recv_window": 5000,
        }

        expected_response = {
            "apiKey": "npOzOAeLVgr2TuxWfNo43AaPWpBbJEoKezh1o8mSQb6ryE2odE11A4AoVlJbQoGx",
            "secretKey": "87ssWB7azoy6ACRfyp6OVOL5U3rtZptX31QWw2kWjl1jHEYRbyM1pd6qykRBQw8p",
            "type": "HMAC_SHA256",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.create_special_key(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/apiKey" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(CreateSpecialKeyResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(CreateSpecialKeyResponse, "from_dict"):
            expected = CreateSpecialKeyResponse.from_dict(expected_response)
        else:
            expected = CreateSpecialKeyResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_create_special_key_missing_required_param_api_name(self):
        """Test that create_special_key() raises RequiredError when 'api_name' is missing."""
        params = {
            "api_name": "api_name_example",
        }
        params["api_name"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'api_name'"
        ):
            self.client.create_special_key(**params)

    def test_create_special_key_server_error(self):
        """Test that create_special_key() raises an error when the server returns an error."""

        params = {
            "api_name": "api_name_example",
        }

        mock_error = Exception("ResponseError")
        self.client.create_special_key = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.create_special_key(**params)

    @patch("binance_common.utils.get_signature")
    def test_delete_special_key_success(self, mock_get_signature):
        """Test delete_special_key() successfully with required parameters only."""

        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response({})

        response = self.client.delete_special_key()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/apiKey" in request_kwargs["url"]
        assert request_kwargs["method"] == "DELETE"

        assert response is not None

        assert response.data() == {}

    @patch("binance_common.utils.get_signature")
    def test_delete_special_key_success_with_optional_params(self, mock_get_signature):
        """Test delete_special_key() successfully with optional parameters."""

        params = {
            "api_name": "api_name_example",
            "symbol": "symbol_example",
            "recv_window": 5000,
        }

        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response({})

        response = self.client.delete_special_key(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/apiKey" in request_kwargs["url"]
        assert request_kwargs["method"] == "DELETE"

        self.mock_session.request.assert_called_once()
        assert response is not None

        assert response.data() == {}

    def test_delete_special_key_server_error(self):
        """Test that delete_special_key() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.delete_special_key = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.delete_special_key()

    @patch("binance_common.utils.get_signature")
    def test_edit_ip_for_special_key_success(self, mock_get_signature):
        """Test edit_ip_for_special_key() successfully with required parameters only."""

        params = {
            "ip": "ip_example",
        }

        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response({})

        response = self.client.edit_ip_for_special_key(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/apiKey/ip" in request_kwargs["url"]
        assert request_kwargs["method"] == "PUT"
        assert normalized["ip"] == "ip_example"

        assert response is not None

        assert response.data() == {}

    @patch("binance_common.utils.get_signature")
    def test_edit_ip_for_special_key_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test edit_ip_for_special_key() successfully with optional parameters."""

        params = {"ip": "ip_example", "symbol": "symbol_example", "recv_window": 5000}

        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response({})

        response = self.client.edit_ip_for_special_key(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/apiKey/ip" in request_kwargs["url"]
        assert request_kwargs["method"] == "PUT"

        self.mock_session.request.assert_called_once()
        assert response is not None

        assert response.data() == {}

    def test_edit_ip_for_special_key_missing_required_param_ip(self):
        """Test that edit_ip_for_special_key() raises RequiredError when 'ip' is missing."""
        params = {
            "ip": "ip_example",
        }
        params["ip"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'ip'"):
            self.client.edit_ip_for_special_key(**params)

    def test_edit_ip_for_special_key_server_error(self):
        """Test that edit_ip_for_special_key() raises an error when the server returns an error."""

        params = {
            "ip": "ip_example",
        }

        mock_error = Exception("ResponseError")
        self.client.edit_ip_for_special_key = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.edit_ip_for_special_key(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_force_liquidation_record_success(self, mock_get_signature):
        """Test get_force_liquidation_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "avgPrice": "0.00388359",
                    "executedQty": "31.39000000",
                    "orderId": 180015097,
                    "price": "0.00388110",
                    "qty": "31.39000000",
                    "side": "SELL",
                    "symbol": "BNBBTC",
                    "timeInForce": "GTC",
                    "isIsolated": True,
                    "updatedTime": 1558941374745,
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_force_liquidation_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/forceLiquidationRec" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetForceLiquidationRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetForceLiquidationRecordResponse, "from_dict")
        ):
            expected = GetForceLiquidationRecordResponse.from_dict(expected_response)
        else:
            expected = GetForceLiquidationRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_force_liquidation_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_force_liquidation_record() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "isolated_symbol": "isolated_symbol_example",
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "avgPrice": "0.00388359",
                    "executedQty": "31.39000000",
                    "orderId": 180015097,
                    "price": "0.00388110",
                    "qty": "31.39000000",
                    "side": "SELL",
                    "symbol": "BNBBTC",
                    "timeInForce": "GTC",
                    "isIsolated": True,
                    "updatedTime": 1558941374745,
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_force_liquidation_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/forceLiquidationRec" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetForceLiquidationRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetForceLiquidationRecordResponse, "from_dict")
        ):
            expected = GetForceLiquidationRecordResponse.from_dict(expected_response)
        else:
            expected = GetForceLiquidationRecordResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_force_liquidation_record_server_error(self):
        """Test that get_force_liquidation_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_force_liquidation_record = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_force_liquidation_record()

    @patch("binance_common.utils.get_signature")
    def test_get_small_liability_exchange_coin_list_success(self, mock_get_signature):
        """Test get_small_liability_exchange_coin_list() successfully with required parameters only."""

        expected_response = [
            {
                "asset": "ETH",
                "interest": "0.00083334",
                "principal": "0.001",
                "liabilityAsset": "USDT",
                "liabilityQty": 0.3552,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_small_liability_exchange_coin_list()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/exchange-small-liability" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetSmallLiabilityExchangeCoinListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetSmallLiabilityExchangeCoinListResponse, "from_dict")
        ):
            expected = GetSmallLiabilityExchangeCoinListResponse.from_dict(
                expected_response
            )
        else:
            expected = GetSmallLiabilityExchangeCoinListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_small_liability_exchange_coin_list_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_small_liability_exchange_coin_list() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = [
            {
                "asset": "ETH",
                "interest": "0.00083334",
                "principal": "0.001",
                "liabilityAsset": "USDT",
                "liabilityQty": 0.3552,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_small_liability_exchange_coin_list(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/exchange-small-liability" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetSmallLiabilityExchangeCoinListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetSmallLiabilityExchangeCoinListResponse, "from_dict")
        ):
            expected = GetSmallLiabilityExchangeCoinListResponse.from_dict(
                expected_response
            )
        else:
            expected = GetSmallLiabilityExchangeCoinListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_small_liability_exchange_coin_list_server_error(self):
        """Test that get_small_liability_exchange_coin_list() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_small_liability_exchange_coin_list = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_small_liability_exchange_coin_list()

    @patch("binance_common.utils.get_signature")
    def test_get_small_liability_exchange_history_success(self, mock_get_signature):
        """Test get_small_liability_exchange_history() successfully with required parameters only."""

        params = {
            "current": 1,
            "size": 10,
        }

        expected_response = {
            "total": 1,
            "rows": [
                {
                    "asset": "ETH",
                    "amount": "0.00083434",
                    "targetAsset": "BUSD",
                    "targetAmount": "1.37576819",
                    "bizType": "EXCHANGE_SMALL_LIABILITY",
                    "timestamp": 1672801339253,
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_small_liability_exchange_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/margin/exchange-small-liability-history" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["current"] == 1
        assert normalized["size"] == 10

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetSmallLiabilityExchangeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetSmallLiabilityExchangeHistoryResponse, "from_dict")
        ):
            expected = GetSmallLiabilityExchangeHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetSmallLiabilityExchangeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_small_liability_exchange_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_small_liability_exchange_history() successfully with optional parameters."""

        params = {
            "current": 1,
            "size": 10,
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "recv_window": 5000,
        }

        expected_response = {
            "total": 1,
            "rows": [
                {
                    "asset": "ETH",
                    "amount": "0.00083434",
                    "targetAsset": "BUSD",
                    "targetAmount": "1.37576819",
                    "bizType": "EXCHANGE_SMALL_LIABILITY",
                    "timestamp": 1672801339253,
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_small_liability_exchange_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/margin/exchange-small-liability-history" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetSmallLiabilityExchangeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetSmallLiabilityExchangeHistoryResponse, "from_dict")
        ):
            expected = GetSmallLiabilityExchangeHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetSmallLiabilityExchangeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_small_liability_exchange_history_missing_required_param_current(self):
        """Test that get_small_liability_exchange_history() raises RequiredError when 'current' is missing."""
        params = {
            "current": 1,
            "size": 10,
        }
        params["current"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'current'"):
            self.client.get_small_liability_exchange_history(**params)

    def test_get_small_liability_exchange_history_missing_required_param_size(self):
        """Test that get_small_liability_exchange_history() raises RequiredError when 'size' is missing."""
        params = {
            "current": 1,
            "size": 10,
        }
        params["size"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'size'"):
            self.client.get_small_liability_exchange_history(**params)

    def test_get_small_liability_exchange_history_server_error(self):
        """Test that get_small_liability_exchange_history() raises an error when the server returns an error."""

        params = {
            "current": 1,
            "size": 10,
        }

        mock_error = Exception("ResponseError")
        self.client.get_small_liability_exchange_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_small_liability_exchange_history(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_account_cancel_all_open_orders_on_a_symbol_success(
        self, mock_get_signature
    ):
        """Test margin_account_cancel_all_open_orders_on_a_symbol() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = [
            {
                "symbol": "BTCUSDT",
                "isIsolated": True,
                "origClientOrderId": "E6APeyTJvkMvLMYMqu1KQ4",
                "orderId": 11,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "price": "0.089853",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "selfTradePreventionMode": "NONE",
            },
            {
                "symbol": "BTCUSDT",
                "isIsolated": False,
                "origClientOrderId": "A3EF2HCwxgZPFMrfwbgrhv",
                "orderId": 13,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "price": "0.090430",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "selfTradePreventionMode": "NONE",
            },
            {
                "orderListId": 1929,
                "contingencyType": "OCO",
                "listStatusType": "ALL_DONE",
                "listOrderStatus": "ALL_DONE",
                "listClientOrderId": "2inzWQdDvZLHbbAmAozX2N",
                "transactionTime": 1585230948299,
                "symbol": "BTCUSDT",
                "isIsolated": True,
                "orders": [
                    {
                        "symbol": "BTCUSDT",
                        "orderId": 20,
                        "clientOrderId": "CwOOIPHSmYywx6jZX77TdL",
                    },
                    {
                        "symbol": "BTCUSDT",
                        "orderId": 21,
                        "clientOrderId": "461cPg51vQjV3zIMOXNz39",
                    },
                ],
                "orderReports": [
                    {
                        "symbol": "BTCUSDT",
                        "origClientOrderId": "CwOOIPHSmYywx6jZX77TdL",
                        "orderId": 20,
                        "orderListId": 1929,
                        "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                        "price": "0.668611",
                        "origQty": "0.690354",
                        "executedQty": "0.000000",
                        "cummulativeQuoteQty": "0.000000",
                        "status": "CANCELED",
                        "timeInForce": "GTC",
                        "type": "STOP_LOSS_LIMIT",
                        "side": "BUY",
                        "stopPrice": "0.378131",
                        "icebergQty": "0.017083",
                    },
                    {
                        "symbol": "BTCUSDT",
                        "origClientOrderId": "461cPg51vQjV3zIMOXNz39",
                        "orderId": 21,
                        "orderListId": 1929,
                        "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                        "price": "0.008791",
                        "origQty": "0.690354",
                        "executedQty": "0.000000",
                        "cummulativeQuoteQty": "0.000000",
                        "status": "CANCELED",
                        "timeInForce": "GTC",
                        "type": "LIMIT_MAKER",
                        "side": "BUY",
                        "icebergQty": "0.639962",
                    },
                ],
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_cancel_all_open_orders_on_a_symbol(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/openOrders" in request_kwargs["url"]
        assert request_kwargs["method"] == "DELETE"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountCancelAllOpenOrdersOnASymbolResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(MarginAccountCancelAllOpenOrdersOnASymbolResponse, "from_dict")
        ):
            expected = MarginAccountCancelAllOpenOrdersOnASymbolResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                MarginAccountCancelAllOpenOrdersOnASymbolResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_account_cancel_all_open_orders_on_a_symbol_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test margin_account_cancel_all_open_orders_on_a_symbol() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "is_isolated": "False",
            "recv_window": 5000,
        }

        expected_response = [
            {
                "symbol": "BTCUSDT",
                "isIsolated": True,
                "origClientOrderId": "E6APeyTJvkMvLMYMqu1KQ4",
                "orderId": 11,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "price": "0.089853",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "selfTradePreventionMode": "NONE",
            },
            {
                "symbol": "BTCUSDT",
                "isIsolated": False,
                "origClientOrderId": "A3EF2HCwxgZPFMrfwbgrhv",
                "orderId": 13,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "price": "0.090430",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "selfTradePreventionMode": "NONE",
            },
            {
                "orderListId": 1929,
                "contingencyType": "OCO",
                "listStatusType": "ALL_DONE",
                "listOrderStatus": "ALL_DONE",
                "listClientOrderId": "2inzWQdDvZLHbbAmAozX2N",
                "transactionTime": 1585230948299,
                "symbol": "BTCUSDT",
                "isIsolated": True,
                "orders": [
                    {
                        "symbol": "BTCUSDT",
                        "orderId": 20,
                        "clientOrderId": "CwOOIPHSmYywx6jZX77TdL",
                    },
                    {
                        "symbol": "BTCUSDT",
                        "orderId": 21,
                        "clientOrderId": "461cPg51vQjV3zIMOXNz39",
                    },
                ],
                "orderReports": [
                    {
                        "symbol": "BTCUSDT",
                        "origClientOrderId": "CwOOIPHSmYywx6jZX77TdL",
                        "orderId": 20,
                        "orderListId": 1929,
                        "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                        "price": "0.668611",
                        "origQty": "0.690354",
                        "executedQty": "0.000000",
                        "cummulativeQuoteQty": "0.000000",
                        "status": "CANCELED",
                        "timeInForce": "GTC",
                        "type": "STOP_LOSS_LIMIT",
                        "side": "BUY",
                        "stopPrice": "0.378131",
                        "icebergQty": "0.017083",
                    },
                    {
                        "symbol": "BTCUSDT",
                        "origClientOrderId": "461cPg51vQjV3zIMOXNz39",
                        "orderId": 21,
                        "orderListId": 1929,
                        "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                        "price": "0.008791",
                        "origQty": "0.690354",
                        "executedQty": "0.000000",
                        "cummulativeQuoteQty": "0.000000",
                        "status": "CANCELED",
                        "timeInForce": "GTC",
                        "type": "LIMIT_MAKER",
                        "side": "BUY",
                        "icebergQty": "0.639962",
                    },
                ],
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_cancel_all_open_orders_on_a_symbol(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/openOrders" in request_kwargs["url"]
        assert request_kwargs["method"] == "DELETE"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountCancelAllOpenOrdersOnASymbolResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(MarginAccountCancelAllOpenOrdersOnASymbolResponse, "from_dict")
        ):
            expected = MarginAccountCancelAllOpenOrdersOnASymbolResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                MarginAccountCancelAllOpenOrdersOnASymbolResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_margin_account_cancel_all_open_orders_on_a_symbol_missing_required_param_symbol(
        self,
    ):
        """Test that margin_account_cancel_all_open_orders_on_a_symbol() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.margin_account_cancel_all_open_orders_on_a_symbol(**params)

    def test_margin_account_cancel_all_open_orders_on_a_symbol_server_error(self):
        """Test that margin_account_cancel_all_open_orders_on_a_symbol() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.margin_account_cancel_all_open_orders_on_a_symbol = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_account_cancel_all_open_orders_on_a_symbol(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_account_cancel_oco_success(self, mock_get_signature):
        """Test margin_account_cancel_oco() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = {
            "orderListId": 0,
            "contingencyType": "OCO",
            "listStatusType": "ALL_DONE",
            "listOrderStatus": "ALL_DONE",
            "listClientOrderId": "C3wyj4WVEktd7u9aVBRXcN",
            "transactionTime": 1574040868128,
            "symbol": "LTCBTC",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "clientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
                },
                {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "clientOrderId": "TXOvglzXuaubXAaENpaRCB",
                },
            ],
            "orderReports": [
                {
                    "symbol": "LTCBTC",
                    "origClientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
                    "orderId": 2,
                    "orderListId": 0,
                    "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                    "price": "1.00000000",
                    "origQty": "10.00000000",
                    "executedQty": "0.00000000",
                    "cummulativeQuoteQty": "0.00000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS_LIMIT",
                    "side": "SELL",
                    "stopPrice": "1.00000000",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "LTCBTC",
                    "origClientOrderId": "TXOvglzXuaubXAaENpaRCB",
                    "orderId": 3,
                    "orderListId": 0,
                    "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                    "price": "3.00000000",
                    "origQty": "10.00000000",
                    "executedQty": "0.00000000",
                    "cummulativeQuoteQty": "0.00000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "SELL",
                    "selfTradePreventionMode": "NONE",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_cancel_oco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/orderList" in request_kwargs["url"]
        assert request_kwargs["method"] == "DELETE"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountCancelOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof or is_list or hasattr(MarginAccountCancelOcoResponse, "from_dict")
        ):
            expected = MarginAccountCancelOcoResponse.from_dict(expected_response)
        else:
            expected = MarginAccountCancelOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_account_cancel_oco_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test margin_account_cancel_oco() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "is_isolated": "False",
            "order_list_id": 1,
            "list_client_order_id": "1",
            "new_client_order_id": "1",
            "recv_window": 5000,
        }

        expected_response = {
            "orderListId": 0,
            "contingencyType": "OCO",
            "listStatusType": "ALL_DONE",
            "listOrderStatus": "ALL_DONE",
            "listClientOrderId": "C3wyj4WVEktd7u9aVBRXcN",
            "transactionTime": 1574040868128,
            "symbol": "LTCBTC",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "clientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
                },
                {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "clientOrderId": "TXOvglzXuaubXAaENpaRCB",
                },
            ],
            "orderReports": [
                {
                    "symbol": "LTCBTC",
                    "origClientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
                    "orderId": 2,
                    "orderListId": 0,
                    "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                    "price": "1.00000000",
                    "origQty": "10.00000000",
                    "executedQty": "0.00000000",
                    "cummulativeQuoteQty": "0.00000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS_LIMIT",
                    "side": "SELL",
                    "stopPrice": "1.00000000",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "LTCBTC",
                    "origClientOrderId": "TXOvglzXuaubXAaENpaRCB",
                    "orderId": 3,
                    "orderListId": 0,
                    "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                    "price": "3.00000000",
                    "origQty": "10.00000000",
                    "executedQty": "0.00000000",
                    "cummulativeQuoteQty": "0.00000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "SELL",
                    "selfTradePreventionMode": "NONE",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_cancel_oco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/orderList" in request_kwargs["url"]
        assert request_kwargs["method"] == "DELETE"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountCancelOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof or is_list or hasattr(MarginAccountCancelOcoResponse, "from_dict")
        ):
            expected = MarginAccountCancelOcoResponse.from_dict(expected_response)
        else:
            expected = MarginAccountCancelOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_margin_account_cancel_oco_missing_required_param_symbol(self):
        """Test that margin_account_cancel_oco() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.margin_account_cancel_oco(**params)

    def test_margin_account_cancel_oco_server_error(self):
        """Test that margin_account_cancel_oco() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.margin_account_cancel_oco = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_account_cancel_oco(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_account_cancel_order_success(self, mock_get_signature):
        """Test margin_account_cancel_order() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = {
            "symbol": "LTCBTC",
            "isIsolated": True,
            "orderId": "28",
            "origClientOrderId": "myOrder1",
            "clientOrderId": "cancelMyOrder1",
            "price": "1.00000000",
            "origQty": "10.00000000",
            "executedQty": "8.00000000",
            "cummulativeQuoteQty": "8.00000000",
            "status": "CANCELED",
            "timeInForce": "GTC",
            "type": "LIMIT",
            "side": "SELL",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_cancel_order(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "DELETE"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountCancelOrderResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(MarginAccountCancelOrderResponse, "from_dict")
        ):
            expected = MarginAccountCancelOrderResponse.from_dict(expected_response)
        else:
            expected = MarginAccountCancelOrderResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_account_cancel_order_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test margin_account_cancel_order() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "is_isolated": "False",
            "order_id": 1,
            "orig_client_order_id": "1",
            "new_client_order_id": "1",
            "recv_window": 5000,
        }

        expected_response = {
            "symbol": "LTCBTC",
            "isIsolated": True,
            "orderId": "28",
            "origClientOrderId": "myOrder1",
            "clientOrderId": "cancelMyOrder1",
            "price": "1.00000000",
            "origQty": "10.00000000",
            "executedQty": "8.00000000",
            "cummulativeQuoteQty": "8.00000000",
            "status": "CANCELED",
            "timeInForce": "GTC",
            "type": "LIMIT",
            "side": "SELL",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_cancel_order(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "DELETE"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountCancelOrderResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(MarginAccountCancelOrderResponse, "from_dict")
        ):
            expected = MarginAccountCancelOrderResponse.from_dict(expected_response)
        else:
            expected = MarginAccountCancelOrderResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_margin_account_cancel_order_missing_required_param_symbol(self):
        """Test that margin_account_cancel_order() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.margin_account_cancel_order(**params)

    def test_margin_account_cancel_order_server_error(self):
        """Test that margin_account_cancel_order() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.margin_account_cancel_order = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_account_cancel_order(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_account_new_oco_success(self, mock_get_signature):
        """Test margin_account_new_oco() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOcoSideEnum["BUY"].value,
            "quantity": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
        }

        expected_response = {
            "orderListId": 0,
            "contingencyType": "OCO",
            "listStatusType": "EXEC_STARTED",
            "listOrderStatus": "EXECUTING",
            "listClientOrderId": "JYVpp3F0f5CAG15DhtrqLp",
            "transactionTime": 1563417480525,
            "symbol": "LTCBTC",
            "marginBuyBorrowAmount": "5",
            "marginBuyBorrowAsset": "BTC",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
                },
                {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
                },
            ],
            "orderReports": [
                {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "orderListId": 0,
                    "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
                    "transactTime": 1563417480525,
                    "price": "0.000000",
                    "origQty": "0.624363",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "NEW",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS",
                    "side": "BUY",
                    "stopPrice": "0.960664",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "orderListId": 0,
                    "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
                    "transactTime": 1563417480525,
                    "price": "0.036435",
                    "origQty": "0.624363",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "BUY",
                    "selfTradePreventionMode": "NONE",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_new_oco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order/oco" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["symbol"] == "symbol_example"
        assert normalized["side"] == MarginAccountNewOcoSideEnum["BUY"].value
        assert normalized["quantity"] == 1.0
        assert normalized["price"] == 1.0
        assert normalized["stopPrice"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountNewOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(MarginAccountNewOcoResponse, "from_dict"):
            expected = MarginAccountNewOcoResponse.from_dict(expected_response)
        else:
            expected = MarginAccountNewOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_account_new_oco_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test margin_account_new_oco() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOcoSideEnum["BUY"].value,
            "quantity": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
            "is_isolated": "False",
            "list_client_order_id": "1",
            "limit_client_order_id": "1",
            "limit_iceberg_qty": 1.0,
            "stop_client_order_id": "1",
            "stop_limit_price": 1.0,
            "stop_iceberg_qty": 1.0,
            "stop_limit_time_in_force": "stop_limit_time_in_force_example",
            "new_order_resp_type": MarginAccountNewOcoNewOrderRespTypeEnum["ACK"].value,
            "side_effect_type": "NO_SIDE_EFFECT",
            "self_trade_prevention_mode": "NONE",
            "auto_repay_at_cancel": True,
            "recv_window": 5000,
        }

        expected_response = {
            "orderListId": 0,
            "contingencyType": "OCO",
            "listStatusType": "EXEC_STARTED",
            "listOrderStatus": "EXECUTING",
            "listClientOrderId": "JYVpp3F0f5CAG15DhtrqLp",
            "transactionTime": 1563417480525,
            "symbol": "LTCBTC",
            "marginBuyBorrowAmount": "5",
            "marginBuyBorrowAsset": "BTC",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
                },
                {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
                },
            ],
            "orderReports": [
                {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "orderListId": 0,
                    "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
                    "transactTime": 1563417480525,
                    "price": "0.000000",
                    "origQty": "0.624363",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "NEW",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS",
                    "side": "BUY",
                    "stopPrice": "0.960664",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "orderListId": 0,
                    "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
                    "transactTime": 1563417480525,
                    "price": "0.036435",
                    "origQty": "0.624363",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "BUY",
                    "selfTradePreventionMode": "NONE",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_new_oco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order/oco" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountNewOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(MarginAccountNewOcoResponse, "from_dict"):
            expected = MarginAccountNewOcoResponse.from_dict(expected_response)
        else:
            expected = MarginAccountNewOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_margin_account_new_oco_missing_required_param_symbol(self):
        """Test that margin_account_new_oco() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOcoSideEnum["BUY"].value,
            "quantity": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.margin_account_new_oco(**params)

    def test_margin_account_new_oco_missing_required_param_side(self):
        """Test that margin_account_new_oco() raises RequiredError when 'side' is missing."""
        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOcoSideEnum["BUY"].value,
            "quantity": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
        }
        params["side"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'side'"):
            self.client.margin_account_new_oco(**params)

    def test_margin_account_new_oco_missing_required_param_quantity(self):
        """Test that margin_account_new_oco() raises RequiredError when 'quantity' is missing."""
        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOcoSideEnum["BUY"].value,
            "quantity": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
        }
        params["quantity"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'quantity'"
        ):
            self.client.margin_account_new_oco(**params)

    def test_margin_account_new_oco_missing_required_param_price(self):
        """Test that margin_account_new_oco() raises RequiredError when 'price' is missing."""
        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOcoSideEnum["BUY"].value,
            "quantity": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
        }
        params["price"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'price'"):
            self.client.margin_account_new_oco(**params)

    def test_margin_account_new_oco_missing_required_param_stop_price(self):
        """Test that margin_account_new_oco() raises RequiredError when 'stop_price' is missing."""
        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOcoSideEnum["BUY"].value,
            "quantity": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
        }
        params["stop_price"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'stop_price'"
        ):
            self.client.margin_account_new_oco(**params)

    def test_margin_account_new_oco_server_error(self):
        """Test that margin_account_new_oco() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOcoSideEnum["BUY"].value,
            "quantity": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.margin_account_new_oco = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_account_new_oco(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_account_new_order_success(self, mock_get_signature):
        """Test margin_account_new_order() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOrderSideEnum["BUY"].value,
            "type": "type_example",
        }

        expected_response = {
            "symbol": "BTCUSDT",
            "orderId": 26769564559,
            "clientOrderId": "E156O3KP4gOif65bjuUK5V",
            "isIsolated": False,
            "transactTime": 1713873075893,
            "price": "0",
            "origQty": "0.001",
            "executedQty": "0.001",
            "cummulativeQuoteQty": "65.98253",
            "status": "FILLED",
            "timeInForce": "GTC",
            "type": "MARKET",
            "side": "SELL",
            "selfTradePreventionMode": "EXPIRE_MAKER",
            "marginBuyBorrowAmount": 5,
            "marginBuyBorrowAsset": "BTC",
            "fills": [
                {
                    "price": "65982.53",
                    "qty": "0.001",
                    "commission": "0.06598253",
                    "commissionAsset": "USDT",
                    "tradeId": 3570680726,
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_new_order(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["symbol"] == "symbol_example"
        assert normalized["side"] == MarginAccountNewOrderSideEnum["BUY"].value
        assert normalized["type"] == "type_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountNewOrderResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(MarginAccountNewOrderResponse, "from_dict"):
            expected = MarginAccountNewOrderResponse.from_dict(expected_response)
        else:
            expected = MarginAccountNewOrderResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_account_new_order_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test margin_account_new_order() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOrderSideEnum["BUY"].value,
            "type": "type_example",
            "is_isolated": "False",
            "quantity": 1.0,
            "quote_order_qty": 1.0,
            "price": 1.0,
            "stop_price": 1.0,
            "new_client_order_id": "1",
            "iceberg_qty": 1.0,
            "new_order_resp_type": MarginAccountNewOrderNewOrderRespTypeEnum[
                "ACK"
            ].value,
            "side_effect_type": "NO_SIDE_EFFECT",
            "time_in_force": MarginAccountNewOrderTimeInForceEnum["GTC"].value,
            "self_trade_prevention_mode": "NONE",
            "auto_repay_at_cancel": True,
            "recv_window": 5000,
        }

        expected_response = {
            "symbol": "BTCUSDT",
            "orderId": 26769564559,
            "clientOrderId": "E156O3KP4gOif65bjuUK5V",
            "isIsolated": False,
            "transactTime": 1713873075893,
            "price": "0",
            "origQty": "0.001",
            "executedQty": "0.001",
            "cummulativeQuoteQty": "65.98253",
            "status": "FILLED",
            "timeInForce": "GTC",
            "type": "MARKET",
            "side": "SELL",
            "selfTradePreventionMode": "EXPIRE_MAKER",
            "marginBuyBorrowAmount": 5,
            "marginBuyBorrowAsset": "BTC",
            "fills": [
                {
                    "price": "65982.53",
                    "qty": "0.001",
                    "commission": "0.06598253",
                    "commissionAsset": "USDT",
                    "tradeId": 3570680726,
                }
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_new_order(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountNewOrderResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(MarginAccountNewOrderResponse, "from_dict"):
            expected = MarginAccountNewOrderResponse.from_dict(expected_response)
        else:
            expected = MarginAccountNewOrderResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_margin_account_new_order_missing_required_param_symbol(self):
        """Test that margin_account_new_order() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOrderSideEnum["BUY"].value,
            "type": "type_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.margin_account_new_order(**params)

    def test_margin_account_new_order_missing_required_param_side(self):
        """Test that margin_account_new_order() raises RequiredError when 'side' is missing."""
        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOrderSideEnum["BUY"].value,
            "type": "type_example",
        }
        params["side"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'side'"):
            self.client.margin_account_new_order(**params)

    def test_margin_account_new_order_missing_required_param_type(self):
        """Test that margin_account_new_order() raises RequiredError when 'type' is missing."""
        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOrderSideEnum["BUY"].value,
            "type": "type_example",
        }
        params["type"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'type'"):
            self.client.margin_account_new_order(**params)

    def test_margin_account_new_order_server_error(self):
        """Test that margin_account_new_order() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
            "side": MarginAccountNewOrderSideEnum["BUY"].value,
            "type": "type_example",
        }

        mock_error = Exception("ResponseError")
        self.client.margin_account_new_order = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_account_new_order(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_account_new_oto_success(self, mock_get_signature):
        """Test margin_account_new_oto() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }

        expected_response = {
            "orderListId": 13551,
            "contingencyType": "OTO",
            "listStatusType": "EXEC_STARTED",
            "listOrderStatus": "EXECUTING",
            "listClientOrderId": "JDuOrsu0Ge8GTyvx8J7VTD",
            "transactionTime": 1725521998054,
            "symbol": "BTCUSDT",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "BTCUSDT",
                    "orderId": 29896699,
                    "clientOrderId": "y8RB6tQEMuHUXybqbtzTxk",
                },
                {
                    "symbol": "BTCUSDT",
                    "orderId": 29896700,
                    "clientOrderId": "dKQEdh5HhXb7Lpp85jz1dQ",
                },
            ],
            "orderReports": [
                {
                    "symbol": "BTCUSDT",
                    "orderId": 29896699,
                    "orderListId": 13551,
                    "clientOrderId": "y8RB6tQEMuHUXybqbtzTxk",
                    "transactTime": 1725521998054,
                    "price": "80000.00000000",
                    "origQty": "0.02000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT",
                    "side": "SELL",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "BTCUSDT",
                    "orderId": 29896700,
                    "orderListId": 13551,
                    "clientOrderId": "dKQEdh5HhXb7Lpp85jz1dQ",
                    "transactTime": 1725521998054,
                    "price": "50000.00000000",
                    "origQty": "0.02000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "PENDING_NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT",
                    "side": "BUY",
                    "selfTradePreventionMode": "NONE",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_new_oto(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order/oto" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["symbol"] == "symbol_example"
        assert normalized["workingType"] == "working_type_example"
        assert normalized["workingSide"] == "working_side_example"
        assert normalized["workingPrice"] == 1.0
        assert normalized["workingQuantity"] == 1.0
        assert normalized["workingIcebergQty"] == 1.0
        assert normalized["pendingType"] == "Order Types"
        assert normalized["pendingSide"] == "pending_side_example"
        assert normalized["pendingQuantity"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountNewOtoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(MarginAccountNewOtoResponse, "from_dict"):
            expected = MarginAccountNewOtoResponse.from_dict(expected_response)
        else:
            expected = MarginAccountNewOtoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_account_new_oto_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test margin_account_new_oto() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "is_isolated": "False",
            "list_client_order_id": "1",
            "new_order_resp_type": MarginAccountNewOtoNewOrderRespTypeEnum["ACK"].value,
            "side_effect_type": "NO_SIDE_EFFECT",
            "self_trade_prevention_mode": "NONE",
            "auto_repay_at_cancel": True,
            "working_client_order_id": "1",
            "working_time_in_force": "working_time_in_force_example",
            "pending_client_order_id": "1",
            "pending_price": 1.0,
            "pending_stop_price": 1.0,
            "pending_trailing_delta": 1.0,
            "pending_iceberg_qty": 1.0,
            "pending_time_in_force": "pending_time_in_force_example",
        }

        expected_response = {
            "orderListId": 13551,
            "contingencyType": "OTO",
            "listStatusType": "EXEC_STARTED",
            "listOrderStatus": "EXECUTING",
            "listClientOrderId": "JDuOrsu0Ge8GTyvx8J7VTD",
            "transactionTime": 1725521998054,
            "symbol": "BTCUSDT",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "BTCUSDT",
                    "orderId": 29896699,
                    "clientOrderId": "y8RB6tQEMuHUXybqbtzTxk",
                },
                {
                    "symbol": "BTCUSDT",
                    "orderId": 29896700,
                    "clientOrderId": "dKQEdh5HhXb7Lpp85jz1dQ",
                },
            ],
            "orderReports": [
                {
                    "symbol": "BTCUSDT",
                    "orderId": 29896699,
                    "orderListId": 13551,
                    "clientOrderId": "y8RB6tQEMuHUXybqbtzTxk",
                    "transactTime": 1725521998054,
                    "price": "80000.00000000",
                    "origQty": "0.02000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT",
                    "side": "SELL",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "BTCUSDT",
                    "orderId": 29896700,
                    "orderListId": 13551,
                    "clientOrderId": "dKQEdh5HhXb7Lpp85jz1dQ",
                    "transactTime": 1725521998054,
                    "price": "50000.00000000",
                    "origQty": "0.02000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "PENDING_NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT",
                    "side": "BUY",
                    "selfTradePreventionMode": "NONE",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_new_oto(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order/oto" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountNewOtoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(MarginAccountNewOtoResponse, "from_dict"):
            expected = MarginAccountNewOtoResponse.from_dict(expected_response)
        else:
            expected = MarginAccountNewOtoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_margin_account_new_oto_missing_required_param_symbol(self):
        """Test that margin_account_new_oto() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_missing_required_param_working_type(self):
        """Test that margin_account_new_oto() raises RequiredError when 'working_type' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["working_type"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_type'"
        ):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_missing_required_param_working_side(self):
        """Test that margin_account_new_oto() raises RequiredError when 'working_side' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["working_side"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_side'"
        ):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_missing_required_param_working_price(self):
        """Test that margin_account_new_oto() raises RequiredError when 'working_price' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["working_price"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_price'"
        ):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_missing_required_param_working_quantity(self):
        """Test that margin_account_new_oto() raises RequiredError when 'working_quantity' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["working_quantity"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_quantity'"
        ):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_missing_required_param_working_iceberg_qty(self):
        """Test that margin_account_new_oto() raises RequiredError when 'working_iceberg_qty' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["working_iceberg_qty"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_iceberg_qty'"
        ):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_missing_required_param_pending_type(self):
        """Test that margin_account_new_oto() raises RequiredError when 'pending_type' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["pending_type"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'pending_type'"
        ):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_missing_required_param_pending_side(self):
        """Test that margin_account_new_oto() raises RequiredError when 'pending_side' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["pending_side"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'pending_side'"
        ):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_missing_required_param_pending_quantity(self):
        """Test that margin_account_new_oto() raises RequiredError when 'pending_quantity' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }
        params["pending_quantity"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'pending_quantity'"
        ):
            self.client.margin_account_new_oto(**params)

    def test_margin_account_new_oto_server_error(self):
        """Test that margin_account_new_oto() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "working_iceberg_qty": 1.0,
            "pending_type": "Order Types",
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.margin_account_new_oto = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_account_new_oto(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_account_new_otoco_success(self, mock_get_signature):
        """Test margin_account_new_otoco() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }

        expected_response = {
            "orderListId": 13509,
            "contingencyType": "OTO",
            "listStatusType": "EXEC_STARTED",
            "listOrderStatus": "EXECUTING",
            "listClientOrderId": "u2AUo48LLef5qVenRtwJZy",
            "transactionTime": 1725521881300,
            "symbol": "BNBUSDT",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282534,
                    "clientOrderId": "IfYDxvrZI4kiyqYpRH13iI",
                },
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282535,
                    "clientOrderId": "0HCSsPRxVfW8BkTUy9z4np",
                },
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282536,
                    "clientOrderId": "dypsgdxWnLY75kwT930cbD",
                },
            ],
            "orderReports": [
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282534,
                    "orderListId": 13509,
                    "clientOrderId": "IfYDxvrZI4kiyqYpRH13iI",
                    "transactTime": 1725521881300,
                    "price": "300.00000000",
                    "origQty": "1.00000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT",
                    "side": "BUY",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282535,
                    "orderListId": 13509,
                    "clientOrderId": "0HCSsPRxVfW8BkTUy9z4np",
                    "transactTime": 1725521881300,
                    "price": "0E-8",
                    "origQty": "1.00000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "PENDING_NEW",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS",
                    "side": "SELL",
                    "stopPrice": "299.00000000",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282536,
                    "orderListId": 13509,
                    "clientOrderId": "dypsgdxWnLY75kwT930cbD",
                    "transactTime": 1725521881300,
                    "price": "301.00000000",
                    "origQty": "1.00000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "PENDING_NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "SELL",
                    "selfTradePreventionMode": "NONE",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_new_otoco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order/otoco" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["symbol"] == "symbol_example"
        assert normalized["workingType"] == "working_type_example"
        assert normalized["workingSide"] == "working_side_example"
        assert normalized["workingPrice"] == 1.0
        assert normalized["workingQuantity"] == 1.0
        assert normalized["pendingSide"] == "pending_side_example"
        assert normalized["pendingQuantity"] == 1.0
        assert normalized["pendingAboveType"] == "pending_above_type_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountNewOtocoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(MarginAccountNewOtocoResponse, "from_dict"):
            expected = MarginAccountNewOtocoResponse.from_dict(expected_response)
        else:
            expected = MarginAccountNewOtocoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_account_new_otoco_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test margin_account_new_otoco() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
            "is_isolated": "False",
            "side_effect_type": "NO_SIDE_EFFECT",
            "auto_repay_at_cancel": True,
            "list_client_order_id": "1",
            "new_order_resp_type": MarginAccountNewOtocoNewOrderRespTypeEnum[
                "ACK"
            ].value,
            "self_trade_prevention_mode": "NONE",
            "working_client_order_id": "1",
            "working_iceberg_qty": 1.0,
            "working_time_in_force": "working_time_in_force_example",
            "pending_above_client_order_id": "1",
            "pending_above_price": 1.0,
            "pending_above_stop_price": 1.0,
            "pending_above_trailing_delta": 1.0,
            "pending_above_iceberg_qty": 1.0,
            "pending_above_time_in_force": "pending_above_time_in_force_example",
            "pending_below_type": "pending_below_type_example",
            "pending_below_client_order_id": "1",
            "pending_below_price": 1.0,
            "pending_below_stop_price": 1.0,
            "pending_below_trailing_delta": 1.0,
            "pending_below_iceberg_qty": 1.0,
            "pending_below_time_in_force": "pending_below_time_in_force_example",
        }

        expected_response = {
            "orderListId": 13509,
            "contingencyType": "OTO",
            "listStatusType": "EXEC_STARTED",
            "listOrderStatus": "EXECUTING",
            "listClientOrderId": "u2AUo48LLef5qVenRtwJZy",
            "transactionTime": 1725521881300,
            "symbol": "BNBUSDT",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282534,
                    "clientOrderId": "IfYDxvrZI4kiyqYpRH13iI",
                },
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282535,
                    "clientOrderId": "0HCSsPRxVfW8BkTUy9z4np",
                },
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282536,
                    "clientOrderId": "dypsgdxWnLY75kwT930cbD",
                },
            ],
            "orderReports": [
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282534,
                    "orderListId": 13509,
                    "clientOrderId": "IfYDxvrZI4kiyqYpRH13iI",
                    "transactTime": 1725521881300,
                    "price": "300.00000000",
                    "origQty": "1.00000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT",
                    "side": "BUY",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282535,
                    "orderListId": 13509,
                    "clientOrderId": "0HCSsPRxVfW8BkTUy9z4np",
                    "transactTime": 1725521881300,
                    "price": "0E-8",
                    "origQty": "1.00000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "PENDING_NEW",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS",
                    "side": "SELL",
                    "stopPrice": "299.00000000",
                    "selfTradePreventionMode": "NONE",
                },
                {
                    "symbol": "BNBUSDT",
                    "orderId": 28282536,
                    "orderListId": 13509,
                    "clientOrderId": "dypsgdxWnLY75kwT930cbD",
                    "transactTime": 1725521881300,
                    "price": "301.00000000",
                    "origQty": "1.00000000",
                    "executedQty": "0",
                    "cummulativeQuoteQty": "0",
                    "status": "PENDING_NEW",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "SELL",
                    "selfTradePreventionMode": "NONE",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_account_new_otoco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order/otoco" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginAccountNewOtocoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(MarginAccountNewOtocoResponse, "from_dict"):
            expected = MarginAccountNewOtocoResponse.from_dict(expected_response)
        else:
            expected = MarginAccountNewOtocoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_margin_account_new_otoco_missing_required_param_symbol(self):
        """Test that margin_account_new_otoco() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.margin_account_new_otoco(**params)

    def test_margin_account_new_otoco_missing_required_param_working_type(self):
        """Test that margin_account_new_otoco() raises RequiredError when 'working_type' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }
        params["working_type"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_type'"
        ):
            self.client.margin_account_new_otoco(**params)

    def test_margin_account_new_otoco_missing_required_param_working_side(self):
        """Test that margin_account_new_otoco() raises RequiredError when 'working_side' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }
        params["working_side"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_side'"
        ):
            self.client.margin_account_new_otoco(**params)

    def test_margin_account_new_otoco_missing_required_param_working_price(self):
        """Test that margin_account_new_otoco() raises RequiredError when 'working_price' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }
        params["working_price"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_price'"
        ):
            self.client.margin_account_new_otoco(**params)

    def test_margin_account_new_otoco_missing_required_param_working_quantity(self):
        """Test that margin_account_new_otoco() raises RequiredError when 'working_quantity' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }
        params["working_quantity"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'working_quantity'"
        ):
            self.client.margin_account_new_otoco(**params)

    def test_margin_account_new_otoco_missing_required_param_pending_side(self):
        """Test that margin_account_new_otoco() raises RequiredError when 'pending_side' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }
        params["pending_side"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'pending_side'"
        ):
            self.client.margin_account_new_otoco(**params)

    def test_margin_account_new_otoco_missing_required_param_pending_quantity(self):
        """Test that margin_account_new_otoco() raises RequiredError when 'pending_quantity' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }
        params["pending_quantity"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'pending_quantity'"
        ):
            self.client.margin_account_new_otoco(**params)

    def test_margin_account_new_otoco_missing_required_param_pending_above_type(self):
        """Test that margin_account_new_otoco() raises RequiredError when 'pending_above_type' is missing."""
        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }
        params["pending_above_type"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'pending_above_type'"
        ):
            self.client.margin_account_new_otoco(**params)

    def test_margin_account_new_otoco_server_error(self):
        """Test that margin_account_new_otoco() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
            "working_type": "working_type_example",
            "working_side": "working_side_example",
            "working_price": 1.0,
            "working_quantity": 1.0,
            "pending_side": "pending_side_example",
            "pending_quantity": 1.0,
            "pending_above_type": "pending_above_type_example",
        }

        mock_error = Exception("ResponseError")
        self.client.margin_account_new_otoco = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_account_new_otoco(**params)

    @patch("binance_common.utils.get_signature")
    def test_margin_manual_liquidation_success(self, mock_get_signature):
        """Test margin_manual_liquidation() successfully with required parameters only."""

        params = {
            "type": "type_example",
        }

        expected_response = {
            "asset": "ETH",
            "interest": "0.00083334",
            "principal": "0.001",
            "liabilityAsset": "USDT",
            "liabilityQty": 0.3552,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_manual_liquidation(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/manual-liquidation" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["type"] == "type_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginManualLiquidationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof or is_list or hasattr(MarginManualLiquidationResponse, "from_dict")
        ):
            expected = MarginManualLiquidationResponse.from_dict(expected_response)
        else:
            expected = MarginManualLiquidationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_margin_manual_liquidation_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test margin_manual_liquidation() successfully with optional parameters."""

        params = {
            "type": "type_example",
            "symbol": "symbol_example",
            "recv_window": 5000,
        }

        expected_response = {
            "asset": "ETH",
            "interest": "0.00083334",
            "principal": "0.001",
            "liabilityAsset": "USDT",
            "liabilityQty": 0.3552,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.margin_manual_liquidation(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/manual-liquidation" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MarginManualLiquidationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof or is_list or hasattr(MarginManualLiquidationResponse, "from_dict")
        ):
            expected = MarginManualLiquidationResponse.from_dict(expected_response)
        else:
            expected = MarginManualLiquidationResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_margin_manual_liquidation_missing_required_param_type(self):
        """Test that margin_manual_liquidation() raises RequiredError when 'type' is missing."""
        params = {
            "type": "type_example",
        }
        params["type"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'type'"):
            self.client.margin_manual_liquidation(**params)

    def test_margin_manual_liquidation_server_error(self):
        """Test that margin_manual_liquidation() raises an error when the server returns an error."""

        params = {
            "type": "type_example",
        }

        mock_error = Exception("ResponseError")
        self.client.margin_manual_liquidation = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.margin_manual_liquidation(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_current_margin_order_count_usage_success(self, mock_get_signature):
        """Test query_current_margin_order_count_usage() successfully with required parameters only."""

        expected_response = [
            {
                "rateLimitType": "ORDERS",
                "interval": "SECOND",
                "intervalNum": 10,
                "limit": 10000,
                "count": 0,
            },
            {
                "rateLimitType": "ORDERS",
                "interval": "DAY",
                "intervalNum": 1,
                "limit": 20000,
                "count": 0,
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_current_margin_order_count_usage()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/rateLimit/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryCurrentMarginOrderCountUsageResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryCurrentMarginOrderCountUsageResponse, "from_dict")
        ):
            expected = QueryCurrentMarginOrderCountUsageResponse.from_dict(
                expected_response
            )
        else:
            expected = QueryCurrentMarginOrderCountUsageResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_current_margin_order_count_usage_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_current_margin_order_count_usage() successfully with optional parameters."""

        params = {
            "is_isolated": "False",
            "symbol": "symbol_example",
            "recv_window": 5000,
        }

        expected_response = [
            {
                "rateLimitType": "ORDERS",
                "interval": "SECOND",
                "intervalNum": 10,
                "limit": 10000,
                "count": 0,
            },
            {
                "rateLimitType": "ORDERS",
                "interval": "DAY",
                "intervalNum": 1,
                "limit": 20000,
                "count": 0,
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_current_margin_order_count_usage(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/rateLimit/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryCurrentMarginOrderCountUsageResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryCurrentMarginOrderCountUsageResponse, "from_dict")
        ):
            expected = QueryCurrentMarginOrderCountUsageResponse.from_dict(
                expected_response
            )
        else:
            expected = QueryCurrentMarginOrderCountUsageResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_current_margin_order_count_usage_server_error(self):
        """Test that query_current_margin_order_count_usage() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_current_margin_order_count_usage = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_current_margin_order_count_usage()

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_all_oco_success(self, mock_get_signature):
        """Test query_margin_accounts_all_oco() successfully with required parameters only."""

        expected_response = [
            {
                "orderListId": 29,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "amEEAXryFzFwYF1FeRpUoZ",
                "transactionTime": 1565245913483,
                "symbol": "LTCBTC",
                "isIsolated": True,
                "orders": [
                    {
                        "symbol": "LTCBTC",
                        "orderId": 4,
                        "clientOrderId": "oD7aesZqjEGlZrbtRpy5zB",
                    },
                    {
                        "symbol": "LTCBTC",
                        "orderId": 5,
                        "clientOrderId": "Jr1h6xirOxgeJOUuYQS7V3",
                    },
                ],
            },
            {
                "orderListId": 28,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "hG7hFNxJV6cZy3Ze4AUT4d",
                "transactionTime": 1565245913407,
                "symbol": "LTCBTC",
                "orders": [
                    {
                        "symbol": "LTCBTC",
                        "orderId": 2,
                        "clientOrderId": "j6lFOfbmFMRjTYA7rRJ0LP",
                    },
                    {
                        "symbol": "LTCBTC",
                        "orderId": 3,
                        "clientOrderId": "z0KCjOdditiLS5ekAFtK81",
                    },
                ],
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_all_oco()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/allOrderList" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsAllOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsAllOcoResponse, "from_dict")
        ):
            expected = QueryMarginAccountsAllOcoResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsAllOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_all_oco_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_accounts_all_oco() successfully with optional parameters."""

        params = {
            "is_isolated": "False",
            "symbol": "symbol_example",
            "from_id": 1,
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "limit": 500,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "orderListId": 29,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "amEEAXryFzFwYF1FeRpUoZ",
                "transactionTime": 1565245913483,
                "symbol": "LTCBTC",
                "isIsolated": True,
                "orders": [
                    {
                        "symbol": "LTCBTC",
                        "orderId": 4,
                        "clientOrderId": "oD7aesZqjEGlZrbtRpy5zB",
                    },
                    {
                        "symbol": "LTCBTC",
                        "orderId": 5,
                        "clientOrderId": "Jr1h6xirOxgeJOUuYQS7V3",
                    },
                ],
            },
            {
                "orderListId": 28,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "hG7hFNxJV6cZy3Ze4AUT4d",
                "transactionTime": 1565245913407,
                "symbol": "LTCBTC",
                "orders": [
                    {
                        "symbol": "LTCBTC",
                        "orderId": 2,
                        "clientOrderId": "j6lFOfbmFMRjTYA7rRJ0LP",
                    },
                    {
                        "symbol": "LTCBTC",
                        "orderId": 3,
                        "clientOrderId": "z0KCjOdditiLS5ekAFtK81",
                    },
                ],
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_all_oco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/allOrderList" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsAllOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsAllOcoResponse, "from_dict")
        ):
            expected = QueryMarginAccountsAllOcoResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsAllOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_accounts_all_oco_server_error(self):
        """Test that query_margin_accounts_all_oco() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_margin_accounts_all_oco = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_accounts_all_oco()

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_all_orders_success(self, mock_get_signature):
        """Test query_margin_accounts_all_orders() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = [
            {
                "clientOrderId": "D2KDy4DIeS56PvkM13f8cP",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "0.00000000",
                "isWorking": False,
                "orderId": 41295,
                "origQty": "5.31000000",
                "price": "0.22500000",
                "side": "SELL",
                "status": "CANCELED",
                "stopPrice": "0.18000000",
                "symbol": "BNBBTC",
                "isIsolated": False,
                "time": 1565769338806,
                "timeInForce": "GTC",
                "type": "TAKE_PROFIT_LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1565769342148,
            },
            {
                "clientOrderId": "gXYtqhcEAs2Rn9SUD9nRKx",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "1.00000000",
                "isWorking": True,
                "orderId": 41296,
                "origQty": "6.65000000",
                "price": "0.18000000",
                "side": "SELL",
                "status": "CANCELED",
                "stopPrice": "0.00000000",
                "symbol": "BNBBTC",
                "isIsolated": False,
                "time": 1565769348687,
                "timeInForce": "GTC",
                "type": "LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1565769352226,
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_all_orders(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/allOrders" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsAllOrdersResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsAllOrdersResponse, "from_dict")
        ):
            expected = QueryMarginAccountsAllOrdersResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsAllOrdersResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_all_orders_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_accounts_all_orders() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "is_isolated": "False",
            "order_id": 1,
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "limit": 500,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "clientOrderId": "D2KDy4DIeS56PvkM13f8cP",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "0.00000000",
                "isWorking": False,
                "orderId": 41295,
                "origQty": "5.31000000",
                "price": "0.22500000",
                "side": "SELL",
                "status": "CANCELED",
                "stopPrice": "0.18000000",
                "symbol": "BNBBTC",
                "isIsolated": False,
                "time": 1565769338806,
                "timeInForce": "GTC",
                "type": "TAKE_PROFIT_LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1565769342148,
            },
            {
                "clientOrderId": "gXYtqhcEAs2Rn9SUD9nRKx",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "1.00000000",
                "isWorking": True,
                "orderId": 41296,
                "origQty": "6.65000000",
                "price": "0.18000000",
                "side": "SELL",
                "status": "CANCELED",
                "stopPrice": "0.00000000",
                "symbol": "BNBBTC",
                "isIsolated": False,
                "time": 1565769348687,
                "timeInForce": "GTC",
                "type": "LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1565769352226,
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_all_orders(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/allOrders" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsAllOrdersResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsAllOrdersResponse, "from_dict")
        ):
            expected = QueryMarginAccountsAllOrdersResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsAllOrdersResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_accounts_all_orders_missing_required_param_symbol(self):
        """Test that query_margin_accounts_all_orders() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.query_margin_accounts_all_orders(**params)

    def test_query_margin_accounts_all_orders_server_error(self):
        """Test that query_margin_accounts_all_orders() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.query_margin_accounts_all_orders = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_accounts_all_orders(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_oco_success(self, mock_get_signature):
        """Test query_margin_accounts_oco() successfully with required parameters only."""

        expected_response = {
            "orderListId": 27,
            "contingencyType": "OCO",
            "listStatusType": "EXEC_STARTED",
            "listOrderStatus": "EXECUTING",
            "listClientOrderId": "h2USkA5YQpaXHPIrkd96xE",
            "transactionTime": 1565245656253,
            "symbol": "LTCBTC",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "LTCBTC",
                    "orderId": 4,
                    "clientOrderId": "qD1gy3kc3Gx0rihm9Y3xwS",
                },
                {
                    "symbol": "LTCBTC",
                    "orderId": 5,
                    "clientOrderId": "ARzZ9I00CPM8i3NhmU9Ega",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_oco()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/orderList" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof or is_list or hasattr(QueryMarginAccountsOcoResponse, "from_dict")
        ):
            expected = QueryMarginAccountsOcoResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_oco_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_accounts_oco() successfully with optional parameters."""

        params = {
            "is_isolated": "False",
            "symbol": "symbol_example",
            "order_list_id": 1,
            "orig_client_order_id": "1",
            "recv_window": 5000,
        }

        expected_response = {
            "orderListId": 27,
            "contingencyType": "OCO",
            "listStatusType": "EXEC_STARTED",
            "listOrderStatus": "EXECUTING",
            "listClientOrderId": "h2USkA5YQpaXHPIrkd96xE",
            "transactionTime": 1565245656253,
            "symbol": "LTCBTC",
            "isIsolated": False,
            "orders": [
                {
                    "symbol": "LTCBTC",
                    "orderId": 4,
                    "clientOrderId": "qD1gy3kc3Gx0rihm9Y3xwS",
                },
                {
                    "symbol": "LTCBTC",
                    "orderId": 5,
                    "clientOrderId": "ARzZ9I00CPM8i3NhmU9Ega",
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_oco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/orderList" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof or is_list or hasattr(QueryMarginAccountsOcoResponse, "from_dict")
        ):
            expected = QueryMarginAccountsOcoResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_accounts_oco_server_error(self):
        """Test that query_margin_accounts_oco() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_margin_accounts_oco = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_accounts_oco()

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_open_oco_success(self, mock_get_signature):
        """Test query_margin_accounts_open_oco() successfully with required parameters only."""

        expected_response = [
            {
                "orderListId": 31,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "wuB13fmulKj3YjdqWEcsnp",
                "transactionTime": 1565246080644,
                "symbol": "LTCBTC",
                "isIsolated": False,
                "orders": [
                    {
                        "symbol": "LTCBTC",
                        "orderId": 4,
                        "clientOrderId": "r3EH2N76dHfLoSZWIUw1bT",
                    },
                    {
                        "symbol": "LTCBTC",
                        "orderId": 5,
                        "clientOrderId": "Cv1SnyPD3qhqpbjpYEHbd2",
                    },
                ],
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_open_oco()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/openOrderList" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsOpenOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsOpenOcoResponse, "from_dict")
        ):
            expected = QueryMarginAccountsOpenOcoResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsOpenOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_open_oco_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_accounts_open_oco() successfully with optional parameters."""

        params = {
            "is_isolated": "False",
            "symbol": "symbol_example",
            "recv_window": 5000,
        }

        expected_response = [
            {
                "orderListId": 31,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "wuB13fmulKj3YjdqWEcsnp",
                "transactionTime": 1565246080644,
                "symbol": "LTCBTC",
                "isIsolated": False,
                "orders": [
                    {
                        "symbol": "LTCBTC",
                        "orderId": 4,
                        "clientOrderId": "r3EH2N76dHfLoSZWIUw1bT",
                    },
                    {
                        "symbol": "LTCBTC",
                        "orderId": 5,
                        "clientOrderId": "Cv1SnyPD3qhqpbjpYEHbd2",
                    },
                ],
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_open_oco(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/openOrderList" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsOpenOcoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsOpenOcoResponse, "from_dict")
        ):
            expected = QueryMarginAccountsOpenOcoResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsOpenOcoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_accounts_open_oco_server_error(self):
        """Test that query_margin_accounts_open_oco() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_margin_accounts_open_oco = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_accounts_open_oco()

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_open_orders_success(self, mock_get_signature):
        """Test query_margin_accounts_open_orders() successfully with required parameters only."""

        expected_response = [
            {
                "clientOrderId": "qhcZw71gAkCCTv0t0k8LUK",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "0.00000000",
                "isWorking": True,
                "orderId": 211842552,
                "origQty": "0.30000000",
                "price": "0.00475010",
                "side": "SELL",
                "status": "NEW",
                "stopPrice": "0.00000000",
                "symbol": "BNBBTC",
                "isIsolated": True,
                "time": 1562040170089,
                "timeInForce": "GTC",
                "type": "LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1562040170089,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_open_orders()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/openOrders" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsOpenOrdersResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsOpenOrdersResponse, "from_dict")
        ):
            expected = QueryMarginAccountsOpenOrdersResponse.from_dict(
                expected_response
            )
        else:
            expected = QueryMarginAccountsOpenOrdersResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_open_orders_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_accounts_open_orders() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "is_isolated": "False",
            "recv_window": 5000,
        }

        expected_response = [
            {
                "clientOrderId": "qhcZw71gAkCCTv0t0k8LUK",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "0.00000000",
                "isWorking": True,
                "orderId": 211842552,
                "origQty": "0.30000000",
                "price": "0.00475010",
                "side": "SELL",
                "status": "NEW",
                "stopPrice": "0.00000000",
                "symbol": "BNBBTC",
                "isIsolated": True,
                "time": 1562040170089,
                "timeInForce": "GTC",
                "type": "LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1562040170089,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_open_orders(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/openOrders" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsOpenOrdersResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsOpenOrdersResponse, "from_dict")
        ):
            expected = QueryMarginAccountsOpenOrdersResponse.from_dict(
                expected_response
            )
        else:
            expected = QueryMarginAccountsOpenOrdersResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_accounts_open_orders_server_error(self):
        """Test that query_margin_accounts_open_orders() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_margin_accounts_open_orders = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_accounts_open_orders()

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_order_success(self, mock_get_signature):
        """Test query_margin_accounts_order() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = {
            "clientOrderId": "ZwfQzuDIGpceVhKW5DvCmO",
            "cummulativeQuoteQty": "0.00000000",
            "executedQty": "0.00000000",
            "icebergQty": "0.00000000",
            "isWorking": True,
            "orderId": 213205622,
            "origQty": "0.30000000",
            "price": "0.00493630",
            "side": "SELL",
            "status": "NEW",
            "stopPrice": "0.00000000",
            "symbol": "BNBBTC",
            "isIsolated": True,
            "time": 1562133008725,
            "timeInForce": "GTC",
            "type": "LIMIT",
            "selfTradePreventionMode": "NONE",
            "updateTime": 1562133008725,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_order(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsOrderResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsOrderResponse, "from_dict")
        ):
            expected = QueryMarginAccountsOrderResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsOrderResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_order_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_accounts_order() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "is_isolated": "False",
            "order_id": 1,
            "orig_client_order_id": "1",
            "recv_window": 5000,
        }

        expected_response = {
            "clientOrderId": "ZwfQzuDIGpceVhKW5DvCmO",
            "cummulativeQuoteQty": "0.00000000",
            "executedQty": "0.00000000",
            "icebergQty": "0.00000000",
            "isWorking": True,
            "orderId": 213205622,
            "origQty": "0.30000000",
            "price": "0.00493630",
            "side": "SELL",
            "status": "NEW",
            "stopPrice": "0.00000000",
            "symbol": "BNBBTC",
            "isIsolated": True,
            "time": 1562133008725,
            "timeInForce": "GTC",
            "type": "LIMIT",
            "selfTradePreventionMode": "NONE",
            "updateTime": 1562133008725,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_order(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/order" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsOrderResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsOrderResponse, "from_dict")
        ):
            expected = QueryMarginAccountsOrderResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsOrderResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_accounts_order_missing_required_param_symbol(self):
        """Test that query_margin_accounts_order() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.query_margin_accounts_order(**params)

    def test_query_margin_accounts_order_server_error(self):
        """Test that query_margin_accounts_order() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.query_margin_accounts_order = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_accounts_order(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_trade_list_success(self, mock_get_signature):
        """Test query_margin_accounts_trade_list() successfully with required parameters only."""

        params = {
            "symbol": "symbol_example",
        }

        expected_response = [
            {
                "commission": "0.00006000",
                "commissionAsset": "BTC",
                "id": 34,
                "isBestMatch": True,
                "isBuyer": False,
                "isMaker": False,
                "orderId": 39324,
                "price": "0.02000000",
                "qty": "3.00000000",
                "symbol": "BNBBTC",
                "isIsolated": False,
                "time": 1561973357171,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_trade_list(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/myTrades" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["symbol"] == "symbol_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsTradeListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsTradeListResponse, "from_dict")
        ):
            expected = QueryMarginAccountsTradeListResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsTradeListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_margin_accounts_trade_list_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_margin_accounts_trade_list() successfully with optional parameters."""

        params = {
            "symbol": "symbol_example",
            "is_isolated": "False",
            "order_id": 1,
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "from_id": 1,
            "limit": 500,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "commission": "0.00006000",
                "commissionAsset": "BTC",
                "id": 34,
                "isBestMatch": True,
                "isBuyer": False,
                "isMaker": False,
                "orderId": 39324,
                "price": "0.02000000",
                "qty": "3.00000000",
                "symbol": "BNBBTC",
                "isIsolated": False,
                "time": 1561973357171,
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_margin_accounts_trade_list(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/myTrades" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryMarginAccountsTradeListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryMarginAccountsTradeListResponse, "from_dict")
        ):
            expected = QueryMarginAccountsTradeListResponse.from_dict(expected_response)
        else:
            expected = QueryMarginAccountsTradeListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_margin_accounts_trade_list_missing_required_param_symbol(self):
        """Test that query_margin_accounts_trade_list() raises RequiredError when 'symbol' is missing."""
        params = {
            "symbol": "symbol_example",
        }
        params["symbol"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'symbol'"):
            self.client.query_margin_accounts_trade_list(**params)

    def test_query_margin_accounts_trade_list_server_error(self):
        """Test that query_margin_accounts_trade_list() raises an error when the server returns an error."""

        params = {
            "symbol": "symbol_example",
        }

        mock_error = Exception("ResponseError")
        self.client.query_margin_accounts_trade_list = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_margin_accounts_trade_list(**params)

    @patch("binance_common.utils.get_signature")
    def test_query_special_key_success(self, mock_get_signature):
        """Test query_special_key() successfully with required parameters only."""

        expected_response = {
            "apiKey": "npOzOAeLVgr2TuxWfNo43AaPWpBbJEoKezh1o8mSQb6ryE2odE11A4AoVlJbQoGx",
            "ip": "0.0.0.0,192.168.0.1,192.168.0.2",
            "apiName": "testName",
            "type": "RSA",
            "permissionMode": "TRADE",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_special_key()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/apiKey" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QuerySpecialKeyResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(QuerySpecialKeyResponse, "from_dict"):
            expected = QuerySpecialKeyResponse.from_dict(expected_response)
        else:
            expected = QuerySpecialKeyResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_special_key_success_with_optional_params(self, mock_get_signature):
        """Test query_special_key() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = {
            "apiKey": "npOzOAeLVgr2TuxWfNo43AaPWpBbJEoKezh1o8mSQb6ryE2odE11A4AoVlJbQoGx",
            "ip": "0.0.0.0,192.168.0.1,192.168.0.2",
            "apiName": "testName",
            "type": "RSA",
            "permissionMode": "TRADE",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_special_key(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/apiKey" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QuerySpecialKeyResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(QuerySpecialKeyResponse, "from_dict"):
            expected = QuerySpecialKeyResponse.from_dict(expected_response)
        else:
            expected = QuerySpecialKeyResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_special_key_server_error(self):
        """Test that query_special_key() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_special_key = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_special_key()

    @patch("binance_common.utils.get_signature")
    def test_query_special_key_list_success(self, mock_get_signature):
        """Test query_special_key_list() successfully with required parameters only."""

        expected_response = [
            {
                "apiName": "testName1",
                "apiKey": "znpOzOAeLVgr2TuxWfNo43AaPWpBbJEoKezh1o8mSQb6ryE2odE11A4AoVlJbQoG",
                "ip": "192.168.0.1,192.168.0.2",
                "type": "RSA",
                "permissionMode": "TRADE",
            },
            {
                "apiName": "testName2",
                "apiKey": "znpOzOAeLVgr2TuxWfNo43AaPWpBbJEoKezh1o8mSQb6ryE2odE11A4AoVlJbQoG",
                "ip": "192.168.0.1,192.168.0.2",
                "type": "Ed25519",
                "permissionMode": "READ",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_special_key_list()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/api-key-list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QuerySpecialKeyListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(QuerySpecialKeyListResponse, "from_dict"):
            expected = QuerySpecialKeyListResponse.from_dict(expected_response)
        else:
            expected = QuerySpecialKeyListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_special_key_list_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_special_key_list() successfully with optional parameters."""

        params = {"symbol": "symbol_example", "recv_window": 5000}

        expected_response = [
            {
                "apiName": "testName1",
                "apiKey": "znpOzOAeLVgr2TuxWfNo43AaPWpBbJEoKezh1o8mSQb6ryE2odE11A4AoVlJbQoG",
                "ip": "192.168.0.1,192.168.0.2",
                "type": "RSA",
                "permissionMode": "TRADE",
            },
            {
                "apiName": "testName2",
                "apiKey": "znpOzOAeLVgr2TuxWfNo43AaPWpBbJEoKezh1o8mSQb6ryE2odE11A4AoVlJbQoG",
                "ip": "192.168.0.1,192.168.0.2",
                "type": "Ed25519",
                "permissionMode": "READ",
            },
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_special_key_list(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/api-key-list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QuerySpecialKeyListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(QuerySpecialKeyListResponse, "from_dict"):
            expected = QuerySpecialKeyListResponse.from_dict(expected_response)
        else:
            expected = QuerySpecialKeyListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_special_key_list_server_error(self):
        """Test that query_special_key_list() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_special_key_list = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_special_key_list()

    @patch("binance_common.utils.get_signature")
    def test_small_liability_exchange_success(self, mock_get_signature):
        """Test small_liability_exchange() successfully with required parameters only."""

        params = {
            "asset_names": ["BTC"],
        }

        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response({})

        response = self.client.small_liability_exchange(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/exchange-small-liability" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert "assetNames" in normalized

        assert response is not None

        assert response.data() == {}

    @patch("binance_common.utils.get_signature")
    def test_small_liability_exchange_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test small_liability_exchange() successfully with optional parameters."""

        params = {"asset_names": ["BTC"], "recv_window": 5000}

        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response({})

        response = self.client.small_liability_exchange(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/margin/exchange-small-liability" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None

        assert response.data() == {}

    def test_small_liability_exchange_missing_required_param_asset_names(self):
        """Test that small_liability_exchange() raises RequiredError when 'asset_names' is missing."""
        params = {
            "asset_names": ["BTC"],
        }
        params["asset_names"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'asset_names'"
        ):
            self.client.small_liability_exchange(**params)

    def test_small_liability_exchange_server_error(self):
        """Test that small_liability_exchange() raises an error when the server returns an error."""

        params = {
            "asset_names": ["BTC"],
        }

        mock_error = Exception("ResponseError")
        self.client.small_liability_exchange = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.small_liability_exchange(**params)
