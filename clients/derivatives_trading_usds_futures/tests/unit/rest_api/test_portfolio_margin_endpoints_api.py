"""
Binance Derivatives Trading USDS Futures REST API

OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_derivatives_trading_usds_futures.rest_api.api import (
    PortfolioMarginEndpointsApi,
)
from binance_sdk_derivatives_trading_usds_futures.rest_api.models import (
    ClassicPortfolioMarginAccountInformationResponse,
)


class TestPortfolioMarginEndpointsApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = PortfolioMarginEndpointsApi(
            configuration=config, session=self.mock_session
        )

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_classic_portfolio_margin_account_information_success(
        self, mock_get_signature
    ):
        """Test classic_portfolio_margin_account_information() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
        }

        expected_response = {
            "maxWithdrawAmountUSD": "1627523.32459208",
            "asset": "BTC",
            "maxWithdrawAmount": "27.43689636",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.classic_portfolio_margin_account_information(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/pmAccountInfo" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["asset"] == "asset_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ClassicPortfolioMarginAccountInformationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(ClassicPortfolioMarginAccountInformationResponse, "from_dict")
        ):
            expected = ClassicPortfolioMarginAccountInformationResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                ClassicPortfolioMarginAccountInformationResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_classic_portfolio_margin_account_information_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test classic_portfolio_margin_account_information() successfully with optional parameters."""

        params = {"asset": "asset_example", "recv_window": 5000}

        expected_response = {
            "maxWithdrawAmountUSD": "1627523.32459208",
            "asset": "BTC",
            "maxWithdrawAmount": "27.43689636",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.classic_portfolio_margin_account_information(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/fapi/v1/pmAccountInfo" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ClassicPortfolioMarginAccountInformationResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(ClassicPortfolioMarginAccountInformationResponse, "from_dict")
        ):
            expected = ClassicPortfolioMarginAccountInformationResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                ClassicPortfolioMarginAccountInformationResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_classic_portfolio_margin_account_information_missing_required_param_asset(
        self,
    ):
        """Test that classic_portfolio_margin_account_information() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.classic_portfolio_margin_account_information(**params)

    def test_classic_portfolio_margin_account_information_server_error(self):
        """Test that classic_portfolio_margin_account_information() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
        }

        mock_error = Exception("ResponseError")
        self.client.classic_portfolio_margin_account_information = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.classic_portfolio_margin_account_information(**params)
