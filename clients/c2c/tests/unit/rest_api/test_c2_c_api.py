"""
Binance C2C REST API

OpenAPI Specification for the Binance C2C REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.utils import is_one_of_model

from binance_sdk_c2c.rest_api.api import C2CApi
from binance_sdk_c2c.rest_api.models import GetC2CTradeHistoryResponse


class TestC2CApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = C2CApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_get_c2_c_trade_history_success(self, mock_get_signature):
        """Test get_c2_c_trade_history() successfully with required parameters only."""

        expected_response = {
            "code": "000000",
            "message": "success",
            "data": [
                {
                    "orderNumber": "20219644646554779648",
                    "advNo": "11218246497340923904",
                    "tradeType": "SELL",
                    "asset": "BUSD",
                    "fiat": "CNY",
                    "fiatSymbol": "￥",
                    "amount": "5000.00000000",
                    "totalPrice": "33400.00000000",
                    "unitPrice": "6.68",
                    "orderStatus": "COMPLETED",
                    "createTime": 1619361369000,
                    "commission": "0",
                    "counterPartNickName": "ab***",
                    "advertisementRole": "TAKER",
                }
            ],
            "total": 1,
            "success": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_c2_c_trade_history()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/c2c/orderMatch/listUserOrderHistory" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetC2CTradeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(GetC2CTradeHistoryResponse, "from_dict"):
            expected = GetC2CTradeHistoryResponse.from_dict(expected_response)
        else:
            expected = GetC2CTradeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_c2_c_trade_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_c2_c_trade_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "page": 1,
            "recv_window": 5000,
        }

        expected_response = {
            "code": "000000",
            "message": "success",
            "data": [
                {
                    "orderNumber": "20219644646554779648",
                    "advNo": "11218246497340923904",
                    "tradeType": "SELL",
                    "asset": "BUSD",
                    "fiat": "CNY",
                    "fiatSymbol": "￥",
                    "amount": "5000.00000000",
                    "totalPrice": "33400.00000000",
                    "unitPrice": "6.68",
                    "orderStatus": "COMPLETED",
                    "createTime": 1619361369000,
                    "commission": "0",
                    "counterPartNickName": "ab***",
                    "advertisementRole": "TAKER",
                }
            ],
            "total": 1,
            "success": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_c2_c_trade_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/c2c/orderMatch/listUserOrderHistory" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetC2CTradeHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(GetC2CTradeHistoryResponse, "from_dict"):
            expected = GetC2CTradeHistoryResponse.from_dict(expected_response)
        else:
            expected = GetC2CTradeHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_c2_c_trade_history_server_error(self):
        """Test that get_c2_c_trade_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_c2_c_trade_history = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_c2_c_trade_history()
