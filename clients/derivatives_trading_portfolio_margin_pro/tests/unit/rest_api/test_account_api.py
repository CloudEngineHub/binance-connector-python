"""
Binance Derivatives Trading Portfolio Margin Pro REST API

OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin Pro REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.api import AccountApi
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    BnbTransferResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    ChangeAutoRepayFuturesStatusResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    FundAutoCollectionResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    FundCollectionByAssetResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    GetAutoRepayFuturesStatusResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    GetPortfolioMarginProAccountBalanceResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    GetPortfolioMarginProAccountInfoResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    GetPortfolioMarginProSpanAccountInfoResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    GetTransferableEarnAssetBalanceForPortfolioMarginResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    MintBfusdForPortfolioMarginResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    PortfolioMarginProBankruptcyLoanRepayResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    QueryPortfolioMarginProBankruptcyLoanAmountResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    RedeemBfusdForPortfolioMarginResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    RepayFuturesNegativeBalanceResponse,
)
from binance_sdk_derivatives_trading_portfolio_margin_pro.rest_api.models import (
    TransferLdusdtForPortfolioMarginResponse,
)


class TestAccountApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = AccountApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_bnb_transfer_success(self, mock_get_signature):
        """Test bnb_transfer() successfully with required parameters only."""

        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
        }

        expected_response = {"tranId": 100000001}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.bnb_transfer(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/bnb-transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["amount"] == 1.0
        assert normalized["transferSide"] == "transfer_side_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(BnbTransferResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(BnbTransferResponse, "from_dict"):
            expected = BnbTransferResponse.from_dict(expected_response)
        else:
            expected = BnbTransferResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_bnb_transfer_success_with_optional_params(self, mock_get_signature):
        """Test bnb_transfer() successfully with optional parameters."""

        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
            "recv_window": 5000,
        }

        expected_response = {"tranId": 100000001}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.bnb_transfer(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/bnb-transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(BnbTransferResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(BnbTransferResponse, "from_dict"):
            expected = BnbTransferResponse.from_dict(expected_response)
        else:
            expected = BnbTransferResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_bnb_transfer_missing_required_param_amount(self):
        """Test that bnb_transfer() raises RequiredError when 'amount' is missing."""
        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
        }
        params["amount"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.bnb_transfer(**params)

    def test_bnb_transfer_missing_required_param_transfer_side(self):
        """Test that bnb_transfer() raises RequiredError when 'transfer_side' is missing."""
        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
        }
        params["transfer_side"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'transfer_side'"
        ):
            self.client.bnb_transfer(**params)

    def test_bnb_transfer_server_error(self):
        """Test that bnb_transfer() raises an error when the server returns an error."""

        params = {
            "amount": 1.0,
            "transfer_side": "transfer_side_example",
        }

        mock_error = Exception("ResponseError")
        self.client.bnb_transfer = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.bnb_transfer(**params)

    @patch("binance_common.utils.get_signature")
    def test_change_auto_repay_futures_status_success(self, mock_get_signature):
        """Test change_auto_repay_futures_status() successfully with required parameters only."""

        params = {
            "auto_repay": "True",
        }

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_auto_repay_futures_status(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/repay-futures-switch" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["autoRepay"] == "True"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeAutoRepayFuturesStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(ChangeAutoRepayFuturesStatusResponse, "from_dict")
        ):
            expected = ChangeAutoRepayFuturesStatusResponse.from_dict(expected_response)
        else:
            expected = ChangeAutoRepayFuturesStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_change_auto_repay_futures_status_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test change_auto_repay_futures_status() successfully with optional parameters."""

        params = {"auto_repay": "True", "recv_window": 5000}

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.change_auto_repay_futures_status(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/repay-futures-switch" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(ChangeAutoRepayFuturesStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(ChangeAutoRepayFuturesStatusResponse, "from_dict")
        ):
            expected = ChangeAutoRepayFuturesStatusResponse.from_dict(expected_response)
        else:
            expected = ChangeAutoRepayFuturesStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_change_auto_repay_futures_status_missing_required_param_auto_repay(self):
        """Test that change_auto_repay_futures_status() raises RequiredError when 'auto_repay' is missing."""
        params = {
            "auto_repay": "True",
        }
        params["auto_repay"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'auto_repay'"
        ):
            self.client.change_auto_repay_futures_status(**params)

    def test_change_auto_repay_futures_status_server_error(self):
        """Test that change_auto_repay_futures_status() raises an error when the server returns an error."""

        params = {
            "auto_repay": "True",
        }

        mock_error = Exception("ResponseError")
        self.client.change_auto_repay_futures_status = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.change_auto_repay_futures_status(**params)

    @patch("binance_common.utils.get_signature")
    def test_fund_auto_collection_success(self, mock_get_signature):
        """Test fund_auto_collection() successfully with required parameters only."""

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.fund_auto_collection()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/auto-collection" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundAutoCollectionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(FundAutoCollectionResponse, "from_dict"):
            expected = FundAutoCollectionResponse.from_dict(expected_response)
        else:
            expected = FundAutoCollectionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_fund_auto_collection_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test fund_auto_collection() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.fund_auto_collection(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/auto-collection" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundAutoCollectionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(FundAutoCollectionResponse, "from_dict"):
            expected = FundAutoCollectionResponse.from_dict(expected_response)
        else:
            expected = FundAutoCollectionResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_fund_auto_collection_server_error(self):
        """Test that fund_auto_collection() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.fund_auto_collection = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.fund_auto_collection()

    @patch("binance_common.utils.get_signature")
    def test_fund_collection_by_asset_success(self, mock_get_signature):
        """Test fund_collection_by_asset() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
        }

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.fund_collection_by_asset(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/asset-collection" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["asset"] == "asset_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundCollectionByAssetResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(FundCollectionByAssetResponse, "from_dict"):
            expected = FundCollectionByAssetResponse.from_dict(expected_response)
        else:
            expected = FundCollectionByAssetResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_fund_collection_by_asset_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test fund_collection_by_asset() successfully with optional parameters."""

        params = {"asset": "asset_example", "recv_window": 5000}

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.fund_collection_by_asset(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/asset-collection" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(FundCollectionByAssetResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(FundCollectionByAssetResponse, "from_dict"):
            expected = FundCollectionByAssetResponse.from_dict(expected_response)
        else:
            expected = FundCollectionByAssetResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_fund_collection_by_asset_missing_required_param_asset(self):
        """Test that fund_collection_by_asset() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.fund_collection_by_asset(**params)

    def test_fund_collection_by_asset_server_error(self):
        """Test that fund_collection_by_asset() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
        }

        mock_error = Exception("ResponseError")
        self.client.fund_collection_by_asset = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.fund_collection_by_asset(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_auto_repay_futures_status_success(self, mock_get_signature):
        """Test get_auto_repay_futures_status() successfully with required parameters only."""

        expected_response = {"autoRepay": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_auto_repay_futures_status()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/repay-futures-switch" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetAutoRepayFuturesStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetAutoRepayFuturesStatusResponse, "from_dict")
        ):
            expected = GetAutoRepayFuturesStatusResponse.from_dict(expected_response)
        else:
            expected = GetAutoRepayFuturesStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_auto_repay_futures_status_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_auto_repay_futures_status() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"autoRepay": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_auto_repay_futures_status(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/repay-futures-switch" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetAutoRepayFuturesStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetAutoRepayFuturesStatusResponse, "from_dict")
        ):
            expected = GetAutoRepayFuturesStatusResponse.from_dict(expected_response)
        else:
            expected = GetAutoRepayFuturesStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_auto_repay_futures_status_server_error(self):
        """Test that get_auto_repay_futures_status() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_auto_repay_futures_status = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_auto_repay_futures_status()

    @patch("binance_common.utils.get_signature")
    def test_get_portfolio_margin_pro_account_balance_success(self, mock_get_signature):
        """Test get_portfolio_margin_pro_account_balance() successfully with required parameters only."""

        expected_response = [
            {
                "asset": "BTC",
                "totalWalletBalance": "100",
                "crossMarginAsset": "100",
                "crossMarginBorrowed": "0",
                "crossMarginFree": "100",
                "crossMarginInterest": "0",
                "crossMarginLocked": "0",
                "umWalletBalance": "0",
                "umUnrealizedPNL": "0",
                "cmWalletBalance": "0",
                "cmUnrealizedPNL": "0",
                "updateTime": 0,
                "negativeBalance": "0",
                "optionWalletBalance": "0",
                "optionEquity": "0",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_portfolio_margin_pro_account_balance()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetPortfolioMarginProAccountBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetPortfolioMarginProAccountBalanceResponse, "from_dict")
        ):
            expected = GetPortfolioMarginProAccountBalanceResponse.from_dict(
                expected_response
            )
        else:
            expected = GetPortfolioMarginProAccountBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_portfolio_margin_pro_account_balance_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_portfolio_margin_pro_account_balance() successfully with optional parameters."""

        params = {"asset": "asset_example", "recv_window": 5000}

        expected_response = [
            {
                "asset": "BTC",
                "totalWalletBalance": "100",
                "crossMarginAsset": "100",
                "crossMarginBorrowed": "0",
                "crossMarginFree": "100",
                "crossMarginInterest": "0",
                "crossMarginLocked": "0",
                "umWalletBalance": "0",
                "umUnrealizedPNL": "0",
                "cmWalletBalance": "0",
                "cmUnrealizedPNL": "0",
                "updateTime": 0,
                "negativeBalance": "0",
                "optionWalletBalance": "0",
                "optionEquity": "0",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_portfolio_margin_pro_account_balance(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetPortfolioMarginProAccountBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetPortfolioMarginProAccountBalanceResponse, "from_dict")
        ):
            expected = GetPortfolioMarginProAccountBalanceResponse.from_dict(
                expected_response
            )
        else:
            expected = GetPortfolioMarginProAccountBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_portfolio_margin_pro_account_balance_server_error(self):
        """Test that get_portfolio_margin_pro_account_balance() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_portfolio_margin_pro_account_balance = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_portfolio_margin_pro_account_balance()

    @patch("binance_common.utils.get_signature")
    def test_get_portfolio_margin_pro_account_info_success(self, mock_get_signature):
        """Test get_portfolio_margin_pro_account_info() successfully with required parameters only."""

        expected_response = {
            "uniMMR": "5167.92171923",
            "accountEquity": "122607.35137903",
            "actualEquity": "142607.35137903",
            "accountMaintMargin": "23.72469206",
            "accountInitialMargin": "47.44938412",
            "totalAvailableBalance": "122,559.90199491",
            "accountStatus": "NORMAL",
            "accountType": "PM_1",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_portfolio_margin_pro_account_info()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetPortfolioMarginProAccountInfoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetPortfolioMarginProAccountInfoResponse, "from_dict")
        ):
            expected = GetPortfolioMarginProAccountInfoResponse.from_dict(
                expected_response
            )
        else:
            expected = GetPortfolioMarginProAccountInfoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_portfolio_margin_pro_account_info_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_portfolio_margin_pro_account_info() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "uniMMR": "5167.92171923",
            "accountEquity": "122607.35137903",
            "actualEquity": "142607.35137903",
            "accountMaintMargin": "23.72469206",
            "accountInitialMargin": "47.44938412",
            "totalAvailableBalance": "122,559.90199491",
            "accountStatus": "NORMAL",
            "accountType": "PM_1",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_portfolio_margin_pro_account_info(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetPortfolioMarginProAccountInfoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetPortfolioMarginProAccountInfoResponse, "from_dict")
        ):
            expected = GetPortfolioMarginProAccountInfoResponse.from_dict(
                expected_response
            )
        else:
            expected = GetPortfolioMarginProAccountInfoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_portfolio_margin_pro_account_info_server_error(self):
        """Test that get_portfolio_margin_pro_account_info() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_portfolio_margin_pro_account_info = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_portfolio_margin_pro_account_info()

    @patch("binance_common.utils.get_signature")
    def test_get_portfolio_margin_pro_span_account_info_success(
        self, mock_get_signature
    ):
        """Test get_portfolio_margin_pro_span_account_info() successfully with required parameters only."""

        expected_response = {
            "uniMMR": "5167.92171923",
            "accountEquity": "122607.35137903",
            "actualEquity": "142607.35137903",
            "accountMaintMargin": "23.72469206",
            "riskUnitMMList": [{"asset": "BTC", "uniMaintainUsd": "23.72469206"}],
            "marginMM": "0.00000000",
            "otherMM": "0.00000000",
            "accountStatus": "NORMAL",
            "accountType": "PM_3",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_portfolio_margin_pro_span_account_info()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v2/portfolio/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetPortfolioMarginProSpanAccountInfoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetPortfolioMarginProSpanAccountInfoResponse, "from_dict")
        ):
            expected = GetPortfolioMarginProSpanAccountInfoResponse.from_dict(
                expected_response
            )
        else:
            expected = GetPortfolioMarginProSpanAccountInfoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_portfolio_margin_pro_span_account_info_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_portfolio_margin_pro_span_account_info() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "uniMMR": "5167.92171923",
            "accountEquity": "122607.35137903",
            "actualEquity": "142607.35137903",
            "accountMaintMargin": "23.72469206",
            "riskUnitMMList": [{"asset": "BTC", "uniMaintainUsd": "23.72469206"}],
            "marginMM": "0.00000000",
            "otherMM": "0.00000000",
            "accountStatus": "NORMAL",
            "accountType": "PM_3",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_portfolio_margin_pro_span_account_info(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v2/portfolio/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetPortfolioMarginProSpanAccountInfoResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetPortfolioMarginProSpanAccountInfoResponse, "from_dict")
        ):
            expected = GetPortfolioMarginProSpanAccountInfoResponse.from_dict(
                expected_response
            )
        else:
            expected = GetPortfolioMarginProSpanAccountInfoResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_portfolio_margin_pro_span_account_info_server_error(self):
        """Test that get_portfolio_margin_pro_span_account_info() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_portfolio_margin_pro_span_account_info = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_portfolio_margin_pro_span_account_info()

    @patch("binance_common.utils.get_signature")
    def test_get_transferable_earn_asset_balance_for_portfolio_margin_success(
        self, mock_get_signature
    ):
        """Test get_transferable_earn_asset_balance_for_portfolio_margin() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
        }

        expected_response = {"asset": "LDUSDT", "amount": "0.55"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_transferable_earn_asset_balance_for_portfolio_margin(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/earn-asset-balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"
        assert normalized["asset"] == "asset_example"
        assert normalized["transferType"] == "transfer_type_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            GetTransferableEarnAssetBalanceForPortfolioMarginResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(
                GetTransferableEarnAssetBalanceForPortfolioMarginResponse, "from_dict"
            )
        ):
            expected = (
                GetTransferableEarnAssetBalanceForPortfolioMarginResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = GetTransferableEarnAssetBalanceForPortfolioMarginResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_transferable_earn_asset_balance_for_portfolio_margin_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_transferable_earn_asset_balance_for_portfolio_margin() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
            "recv_window": 5000,
        }

        expected_response = {"asset": "LDUSDT", "amount": "0.55"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_transferable_earn_asset_balance_for_portfolio_margin(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/earn-asset-balance" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            GetTransferableEarnAssetBalanceForPortfolioMarginResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(
                GetTransferableEarnAssetBalanceForPortfolioMarginResponse, "from_dict"
            )
        ):
            expected = (
                GetTransferableEarnAssetBalanceForPortfolioMarginResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = GetTransferableEarnAssetBalanceForPortfolioMarginResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_transferable_earn_asset_balance_for_portfolio_margin_missing_required_param_asset(
        self,
    ):
        """Test that get_transferable_earn_asset_balance_for_portfolio_margin() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.get_transferable_earn_asset_balance_for_portfolio_margin(
                **params
            )

    def test_get_transferable_earn_asset_balance_for_portfolio_margin_missing_required_param_transfer_type(
        self,
    ):
        """Test that get_transferable_earn_asset_balance_for_portfolio_margin() raises RequiredError when 'transfer_type' is missing."""
        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
        }
        params["transfer_type"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'transfer_type'"
        ):
            self.client.get_transferable_earn_asset_balance_for_portfolio_margin(
                **params
            )

    def test_get_transferable_earn_asset_balance_for_portfolio_margin_server_error(
        self,
    ):
        """Test that get_transferable_earn_asset_balance_for_portfolio_margin() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
        }

        mock_error = Exception("ResponseError")
        self.client.get_transferable_earn_asset_balance_for_portfolio_margin = (
            MagicMock(side_effect=mock_error)
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_transferable_earn_asset_balance_for_portfolio_margin(
                **params
            )

    @patch("binance_common.utils.get_signature")
    def test_mint_bfusd_for_portfolio_margin_success(self, mock_get_signature):
        """Test mint_bfusd_for_portfolio_margin() successfully with required parameters only."""

        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }

        expected_response = {
            "fromAsset": "USDT",
            "targetAsset": "BFUSD",
            "fromAssetQty": 10,
            "targetAssetQty": 9.998,
            "mintRate": 0.9998,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.mint_bfusd_for_portfolio_margin(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/mint" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["fromAsset"] == "from_asset_example"
        assert normalized["targetAsset"] == "target_asset_example"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MintBfusdForPortfolioMarginResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(MintBfusdForPortfolioMarginResponse, "from_dict")
        ):
            expected = MintBfusdForPortfolioMarginResponse.from_dict(expected_response)
        else:
            expected = MintBfusdForPortfolioMarginResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_mint_bfusd_for_portfolio_margin_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test mint_bfusd_for_portfolio_margin() successfully with optional parameters."""

        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
            "recv_window": 5000,
        }

        expected_response = {
            "fromAsset": "USDT",
            "targetAsset": "BFUSD",
            "fromAssetQty": 10,
            "targetAssetQty": 9.998,
            "mintRate": 0.9998,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.mint_bfusd_for_portfolio_margin(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/mint" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(MintBfusdForPortfolioMarginResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(MintBfusdForPortfolioMarginResponse, "from_dict")
        ):
            expected = MintBfusdForPortfolioMarginResponse.from_dict(expected_response)
        else:
            expected = MintBfusdForPortfolioMarginResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_mint_bfusd_for_portfolio_margin_missing_required_param_from_asset(self):
        """Test that mint_bfusd_for_portfolio_margin() raises RequiredError when 'from_asset' is missing."""
        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }
        params["from_asset"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'from_asset'"
        ):
            self.client.mint_bfusd_for_portfolio_margin(**params)

    def test_mint_bfusd_for_portfolio_margin_missing_required_param_target_asset(self):
        """Test that mint_bfusd_for_portfolio_margin() raises RequiredError when 'target_asset' is missing."""
        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }
        params["target_asset"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'target_asset'"
        ):
            self.client.mint_bfusd_for_portfolio_margin(**params)

    def test_mint_bfusd_for_portfolio_margin_missing_required_param_amount(self):
        """Test that mint_bfusd_for_portfolio_margin() raises RequiredError when 'amount' is missing."""
        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }
        params["amount"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.mint_bfusd_for_portfolio_margin(**params)

    def test_mint_bfusd_for_portfolio_margin_server_error(self):
        """Test that mint_bfusd_for_portfolio_margin() raises an error when the server returns an error."""

        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.mint_bfusd_for_portfolio_margin = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.mint_bfusd_for_portfolio_margin(**params)

    @patch("binance_common.utils.get_signature")
    def test_portfolio_margin_pro_bankruptcy_loan_repay_success(
        self, mock_get_signature
    ):
        """Test portfolio_margin_pro_bankruptcy_loan_repay() successfully with required parameters only."""

        expected_response = {"tranId": 58203331886213500}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.portfolio_margin_pro_bankruptcy_loan_repay()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/repay" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(PortfolioMarginProBankruptcyLoanRepayResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(PortfolioMarginProBankruptcyLoanRepayResponse, "from_dict")
        ):
            expected = PortfolioMarginProBankruptcyLoanRepayResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                PortfolioMarginProBankruptcyLoanRepayResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_portfolio_margin_pro_bankruptcy_loan_repay_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test portfolio_margin_pro_bankruptcy_loan_repay() successfully with optional parameters."""

        params = {"var_from": "SPOT", "recv_window": 5000}

        expected_response = {"tranId": 58203331886213500}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.portfolio_margin_pro_bankruptcy_loan_repay(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/repay" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(PortfolioMarginProBankruptcyLoanRepayResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(PortfolioMarginProBankruptcyLoanRepayResponse, "from_dict")
        ):
            expected = PortfolioMarginProBankruptcyLoanRepayResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                PortfolioMarginProBankruptcyLoanRepayResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_portfolio_margin_pro_bankruptcy_loan_repay_server_error(self):
        """Test that portfolio_margin_pro_bankruptcy_loan_repay() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.portfolio_margin_pro_bankruptcy_loan_repay = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.portfolio_margin_pro_bankruptcy_loan_repay()

    @patch("binance_common.utils.get_signature")
    def test_query_portfolio_margin_pro_bankruptcy_loan_amount_success(
        self, mock_get_signature
    ):
        """Test query_portfolio_margin_pro_bankruptcy_loan_amount() successfully with required parameters only."""

        expected_response = {"asset": "BUSD", "amount": "579.45"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_portfolio_margin_pro_bankruptcy_loan_amount()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/pmLoan" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryPortfolioMarginProBankruptcyLoanAmountResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryPortfolioMarginProBankruptcyLoanAmountResponse, "from_dict")
        ):
            expected = QueryPortfolioMarginProBankruptcyLoanAmountResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                QueryPortfolioMarginProBankruptcyLoanAmountResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_portfolio_margin_pro_bankruptcy_loan_amount_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_portfolio_margin_pro_bankruptcy_loan_amount() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {"asset": "BUSD", "amount": "579.45"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_portfolio_margin_pro_bankruptcy_loan_amount(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/pmLoan" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(QueryPortfolioMarginProBankruptcyLoanAmountResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(QueryPortfolioMarginProBankruptcyLoanAmountResponse, "from_dict")
        ):
            expected = QueryPortfolioMarginProBankruptcyLoanAmountResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                QueryPortfolioMarginProBankruptcyLoanAmountResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_query_portfolio_margin_pro_bankruptcy_loan_amount_server_error(self):
        """Test that query_portfolio_margin_pro_bankruptcy_loan_amount() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_portfolio_margin_pro_bankruptcy_loan_amount = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_portfolio_margin_pro_bankruptcy_loan_amount()

    @patch("binance_common.utils.get_signature")
    def test_query_portfolio_margin_pro_bankruptcy_loan_repay_history_success(
        self, mock_get_signature
    ):
        """Test query_portfolio_margin_pro_bankruptcy_loan_repay_history() successfully with required parameters only."""

        expected_response = {
            "total": 3,
            "rows": [
                {"asset": "USDT", "amount": "404.80294503", "repayTime": 1731336427804},
                {
                    "asset": "USDT",
                    "amount": "4620.41204574",
                    "repayTime": 1726125090016,
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = (
            self.client.query_portfolio_margin_pro_bankruptcy_loan_repay_history()
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/pmloan-history" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(
                QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse, "from_dict"
            )
        ):
            expected = (
                QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_portfolio_margin_pro_bankruptcy_loan_repay_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_portfolio_margin_pro_bankruptcy_loan_repay_history() successfully with optional parameters."""

        params = {
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "total": 3,
            "rows": [
                {"asset": "USDT", "amount": "404.80294503", "repayTime": 1731336427804},
                {
                    "asset": "USDT",
                    "amount": "4620.41204574",
                    "repayTime": 1726125090016,
                },
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.query_portfolio_margin_pro_bankruptcy_loan_repay_history(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/pmloan-history" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(
                QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse, "from_dict"
            )
        ):
            expected = (
                QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = QueryPortfolioMarginProBankruptcyLoanRepayHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_portfolio_margin_pro_bankruptcy_loan_repay_history_server_error(
        self,
    ):
        """Test that query_portfolio_margin_pro_bankruptcy_loan_repay_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_portfolio_margin_pro_bankruptcy_loan_repay_history = (
            MagicMock(side_effect=mock_error)
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_portfolio_margin_pro_bankruptcy_loan_repay_history()

    @patch("binance_common.utils.get_signature")
    def test_query_portfolio_margin_pro_negative_balance_interest_history_success(
        self, mock_get_signature
    ):
        """Test query_portfolio_margin_pro_negative_balance_interest_history() successfully with required parameters only."""

        expected_response = [
            {
                "asset": "USDT",
                "interest": "24.4440",
                "interestAccruedTime": 1670227200000,
                "interestRate": "0.0001164",
                "principal": "210000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = (
            self.client.query_portfolio_margin_pro_negative_balance_interest_history()
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/interest-history" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(
                QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse,
                "from_dict",
            )
        ):
            expected = (
                QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_query_portfolio_margin_pro_negative_balance_interest_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test query_portfolio_margin_pro_negative_balance_interest_history() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = [
            {
                "asset": "USDT",
                "interest": "24.4440",
                "interestAccruedTime": 1670227200000,
                "interestRate": "0.0001164",
                "principal": "210000",
            }
        ]
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = (
            self.client.query_portfolio_margin_pro_negative_balance_interest_history(
                **params
            )
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/interest-history" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(
            QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse
        )

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(
                QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse,
                "from_dict",
            )
        ):
            expected = (
                QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse.from_dict(
                    expected_response
                )
            )
        else:
            expected = QueryPortfolioMarginProNegativeBalanceInterestHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_query_portfolio_margin_pro_negative_balance_interest_history_server_error(
        self,
    ):
        """Test that query_portfolio_margin_pro_negative_balance_interest_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.query_portfolio_margin_pro_negative_balance_interest_history = (
            MagicMock(side_effect=mock_error)
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.query_portfolio_margin_pro_negative_balance_interest_history()

    @patch("binance_common.utils.get_signature")
    def test_redeem_bfusd_for_portfolio_margin_success(self, mock_get_signature):
        """Test redeem_bfusd_for_portfolio_margin() successfully with required parameters only."""

        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }

        expected_response = {
            "fromAsset": "BFUSD",
            "targetAsset": "USDT",
            "fromAssetQty": 9.99800001,
            "targetAssetQty": 9.996000409998,
            "redeemRate": 0.9998,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.redeem_bfusd_for_portfolio_margin(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/redeem" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["fromAsset"] == "from_asset_example"
        assert normalized["targetAsset"] == "target_asset_example"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RedeemBfusdForPortfolioMarginResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(RedeemBfusdForPortfolioMarginResponse, "from_dict")
        ):
            expected = RedeemBfusdForPortfolioMarginResponse.from_dict(
                expected_response
            )
        else:
            expected = RedeemBfusdForPortfolioMarginResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_redeem_bfusd_for_portfolio_margin_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test redeem_bfusd_for_portfolio_margin() successfully with optional parameters."""

        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
            "recv_window": 5000,
        }

        expected_response = {
            "fromAsset": "BFUSD",
            "targetAsset": "USDT",
            "fromAssetQty": 9.99800001,
            "targetAssetQty": 9.996000409998,
            "redeemRate": 0.9998,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.redeem_bfusd_for_portfolio_margin(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/redeem" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RedeemBfusdForPortfolioMarginResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(RedeemBfusdForPortfolioMarginResponse, "from_dict")
        ):
            expected = RedeemBfusdForPortfolioMarginResponse.from_dict(
                expected_response
            )
        else:
            expected = RedeemBfusdForPortfolioMarginResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_redeem_bfusd_for_portfolio_margin_missing_required_param_from_asset(self):
        """Test that redeem_bfusd_for_portfolio_margin() raises RequiredError when 'from_asset' is missing."""
        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }
        params["from_asset"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'from_asset'"
        ):
            self.client.redeem_bfusd_for_portfolio_margin(**params)

    def test_redeem_bfusd_for_portfolio_margin_missing_required_param_target_asset(
        self,
    ):
        """Test that redeem_bfusd_for_portfolio_margin() raises RequiredError when 'target_asset' is missing."""
        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }
        params["target_asset"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'target_asset'"
        ):
            self.client.redeem_bfusd_for_portfolio_margin(**params)

    def test_redeem_bfusd_for_portfolio_margin_missing_required_param_amount(self):
        """Test that redeem_bfusd_for_portfolio_margin() raises RequiredError when 'amount' is missing."""
        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }
        params["amount"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.redeem_bfusd_for_portfolio_margin(**params)

    def test_redeem_bfusd_for_portfolio_margin_server_error(self):
        """Test that redeem_bfusd_for_portfolio_margin() raises an error when the server returns an error."""

        params = {
            "from_asset": "from_asset_example",
            "target_asset": "target_asset_example",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.redeem_bfusd_for_portfolio_margin = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.redeem_bfusd_for_portfolio_margin(**params)

    @patch("binance_common.utils.get_signature")
    def test_repay_futures_negative_balance_success(self, mock_get_signature):
        """Test repay_futures_negative_balance() successfully with required parameters only."""

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.repay_futures_negative_balance()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/portfolio/repay-futures-negative-balance" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "POST"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RepayFuturesNegativeBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(RepayFuturesNegativeBalanceResponse, "from_dict")
        ):
            expected = RepayFuturesNegativeBalanceResponse.from_dict(expected_response)
        else:
            expected = RepayFuturesNegativeBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_repay_futures_negative_balance_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test repay_futures_negative_balance() successfully with optional parameters."""

        params = {"var_from": "SPOT", "recv_window": 5000}

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.repay_futures_negative_balance(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/portfolio/repay-futures-negative-balance" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RepayFuturesNegativeBalanceResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(RepayFuturesNegativeBalanceResponse, "from_dict")
        ):
            expected = RepayFuturesNegativeBalanceResponse.from_dict(expected_response)
        else:
            expected = RepayFuturesNegativeBalanceResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_repay_futures_negative_balance_server_error(self):
        """Test that repay_futures_negative_balance() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.repay_futures_negative_balance = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.repay_futures_negative_balance()

    @patch("binance_common.utils.get_signature")
    def test_transfer_ldusdt_for_portfolio_margin_success(self, mock_get_signature):
        """Test transfer_ldusdt_for_portfolio_margin() successfully with required parameters only."""

        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
            "amount": 1.0,
        }

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.transfer_ldusdt_for_portfolio_margin(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/earn-asset-transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["asset"] == "asset_example"
        assert normalized["transferType"] == "transfer_type_example"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(TransferLdusdtForPortfolioMarginResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(TransferLdusdtForPortfolioMarginResponse, "from_dict")
        ):
            expected = TransferLdusdtForPortfolioMarginResponse.from_dict(
                expected_response
            )
        else:
            expected = TransferLdusdtForPortfolioMarginResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_transfer_ldusdt_for_portfolio_margin_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test transfer_ldusdt_for_portfolio_margin() successfully with optional parameters."""

        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
            "amount": 1.0,
            "recv_window": 5000,
        }

        expected_response = {"msg": "success"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.transfer_ldusdt_for_portfolio_margin(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/portfolio/earn-asset-transfer" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(TransferLdusdtForPortfolioMarginResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(TransferLdusdtForPortfolioMarginResponse, "from_dict")
        ):
            expected = TransferLdusdtForPortfolioMarginResponse.from_dict(
                expected_response
            )
        else:
            expected = TransferLdusdtForPortfolioMarginResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_transfer_ldusdt_for_portfolio_margin_missing_required_param_asset(self):
        """Test that transfer_ldusdt_for_portfolio_margin() raises RequiredError when 'asset' is missing."""
        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
            "amount": 1.0,
        }
        params["asset"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'asset'"):
            self.client.transfer_ldusdt_for_portfolio_margin(**params)

    def test_transfer_ldusdt_for_portfolio_margin_missing_required_param_transfer_type(
        self,
    ):
        """Test that transfer_ldusdt_for_portfolio_margin() raises RequiredError when 'transfer_type' is missing."""
        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
            "amount": 1.0,
        }
        params["transfer_type"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'transfer_type'"
        ):
            self.client.transfer_ldusdt_for_portfolio_margin(**params)

    def test_transfer_ldusdt_for_portfolio_margin_missing_required_param_amount(self):
        """Test that transfer_ldusdt_for_portfolio_margin() raises RequiredError when 'amount' is missing."""
        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
            "amount": 1.0,
        }
        params["amount"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.transfer_ldusdt_for_portfolio_margin(**params)

    def test_transfer_ldusdt_for_portfolio_margin_server_error(self):
        """Test that transfer_ldusdt_for_portfolio_margin() raises an error when the server returns an error."""

        params = {
            "asset": "asset_example",
            "transfer_type": "transfer_type_example",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.transfer_ldusdt_for_portfolio_margin = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.transfer_ldusdt_for_portfolio_margin(**params)
