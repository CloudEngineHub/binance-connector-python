"""
Binance Copy Trading REST API

OpenAPI Specification for the Binance Copy Trading REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.utils import is_one_of_model

from binance_sdk_copy_trading.rest_api.api import FutureCopyTradingApi
from binance_sdk_copy_trading.rest_api.models import GetFuturesLeadTraderStatusResponse
from binance_sdk_copy_trading.rest_api.models import (
    GetFuturesLeadTradingSymbolWhitelistResponse,
)


class TestFutureCopyTradingApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = FutureCopyTradingApi(
            configuration=config, session=self.mock_session
        )

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_get_futures_lead_trader_status_success(self, mock_get_signature):
        """Test get_futures_lead_trader_status() successfully with required parameters only."""

        expected_response = {
            "code": "000000",
            "message": "success",
            "data": {"isLeadTrader": True, "time": 1717382310843},
            "success": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_lead_trader_status()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/copyTrading/futures/userStatus" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesLeadTraderStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetFuturesLeadTraderStatusResponse, "from_dict")
        ):
            expected = GetFuturesLeadTraderStatusResponse.from_dict(expected_response)
        else:
            expected = GetFuturesLeadTraderStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_futures_lead_trader_status_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_futures_lead_trader_status() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "code": "000000",
            "message": "success",
            "data": {"isLeadTrader": True, "time": 1717382310843},
            "success": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_lead_trader_status(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/copyTrading/futures/userStatus" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesLeadTraderStatusResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetFuturesLeadTraderStatusResponse, "from_dict")
        ):
            expected = GetFuturesLeadTraderStatusResponse.from_dict(expected_response)
        else:
            expected = GetFuturesLeadTraderStatusResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_futures_lead_trader_status_server_error(self):
        """Test that get_futures_lead_trader_status() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_futures_lead_trader_status = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_futures_lead_trader_status()

    @patch("binance_common.utils.get_signature")
    def test_get_futures_lead_trading_symbol_whitelist_success(
        self, mock_get_signature
    ):
        """Test get_futures_lead_trading_symbol_whitelist() successfully with required parameters only."""

        expected_response = {
            "code": "000000",
            "message": "success",
            "data": [
                {"symbol": "BTCUSDT", "baseAsset": "BTC", "quoteAsset": "USDT"},
                {"symbol": "ETHUSDT", "baseAsset": "ETH", "quoteAsset": "USDT"},
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_lead_trading_symbol_whitelist()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/copyTrading/futures/leadSymbol" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesLeadTradingSymbolWhitelistResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetFuturesLeadTradingSymbolWhitelistResponse, "from_dict")
        ):
            expected = GetFuturesLeadTradingSymbolWhitelistResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFuturesLeadTradingSymbolWhitelistResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_futures_lead_trading_symbol_whitelist_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_futures_lead_trading_symbol_whitelist() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "code": "000000",
            "message": "success",
            "data": [
                {"symbol": "BTCUSDT", "baseAsset": "BTC", "quoteAsset": "USDT"},
                {"symbol": "ETHUSDT", "baseAsset": "ETH", "quoteAsset": "USDT"},
            ],
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_futures_lead_trading_symbol_whitelist(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/copyTrading/futures/leadSymbol" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetFuturesLeadTradingSymbolWhitelistResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetFuturesLeadTradingSymbolWhitelistResponse, "from_dict")
        ):
            expected = GetFuturesLeadTradingSymbolWhitelistResponse.from_dict(
                expected_response
            )
        else:
            expected = GetFuturesLeadTradingSymbolWhitelistResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_futures_lead_trading_symbol_whitelist_server_error(self):
        """Test that get_futures_lead_trading_symbol_whitelist() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_futures_lead_trading_symbol_whitelist = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_futures_lead_trading_symbol_whitelist()
