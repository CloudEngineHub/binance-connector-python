"""
Binance Staking REST API

OpenAPI Specification for the Binance Staking REST API
The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import pytest
import requests

from unittest.mock import MagicMock, patch
from urllib.parse import parse_qs

from binance_common.configuration import ConfigurationRestAPI
from binance_common.errors import RequiredError
from binance_common.utils import normalize_query_values, is_one_of_model, snake_to_camel

from binance_sdk_staking.rest_api.api import OnChainYieldsApi
from binance_sdk_staking.rest_api.models import (
    GetOnChainYieldsLockedPersonalLeftQuotaResponse,
)
from binance_sdk_staking.rest_api.models import (
    GetOnChainYieldsLockedProductListResponse,
)
from binance_sdk_staking.rest_api.models import (
    GetOnChainYieldsLockedProductPositionResponse,
)
from binance_sdk_staking.rest_api.models import (
    GetOnChainYieldsLockedRedemptionRecordResponse,
)
from binance_sdk_staking.rest_api.models import (
    GetOnChainYieldsLockedRewardsHistoryResponse,
)
from binance_sdk_staking.rest_api.models import (
    GetOnChainYieldsLockedSubscriptionPreviewResponse,
)
from binance_sdk_staking.rest_api.models import (
    GetOnChainYieldsLockedSubscriptionRecordResponse,
)
from binance_sdk_staking.rest_api.models import OnChainYieldsAccountResponse
from binance_sdk_staking.rest_api.models import RedeemOnChainYieldsLockedProductResponse
from binance_sdk_staking.rest_api.models import (
    SetOnChainYieldsLockedAutoSubscribeResponse,
)
from binance_sdk_staking.rest_api.models import (
    SetOnChainYieldsLockedProductRedeemOptionResponse,
)
from binance_sdk_staking.rest_api.models import (
    SubscribeOnChainYieldsLockedProductResponse,
)


class TestOnChainYieldsApi:
    @pytest.fixture(autouse=True)
    def setup_client(self):
        """Setup a client instance with mocked session before each test method."""
        self.mock_session = MagicMock(spec=requests.Session)
        config = ConfigurationRestAPI(
            api_key="test-api-key",
            api_secret="test-api-secret",
        )
        self.client = OnChainYieldsApi(configuration=config, session=self.mock_session)

    def set_mock_response(self, data: dict = {}, status_code=200, headers=None):
        """Helper method to setup mock response for the client's session request."""
        if headers is None:
            headers = {}

        mock_response = MagicMock()
        mock_response.status_code = status_code
        mock_response.json.return_value = data
        mock_response.text = json.dumps(data)
        mock_response.headers = headers

        self.mock_session.request.return_value = mock_response

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_personal_left_quota_success(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_personal_left_quota() successfully with required parameters only."""

        params = {
            "project_id": "1",
        }

        expected_response = {"leftPersonalQuota": "1000"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_personal_left_quota(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/personalLeftQuota" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["projectId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedPersonalLeftQuotaResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedPersonalLeftQuotaResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedPersonalLeftQuotaResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedPersonalLeftQuotaResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_personal_left_quota_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_personal_left_quota() successfully with optional parameters."""

        params = {"project_id": "1", "recv_window": 5000}

        expected_response = {"leftPersonalQuota": "1000"}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_personal_left_quota(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/personalLeftQuota" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedPersonalLeftQuotaResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedPersonalLeftQuotaResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedPersonalLeftQuotaResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedPersonalLeftQuotaResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_on_chain_yields_locked_personal_left_quota_missing_required_param_project_id(
        self,
    ):
        """Test that get_on_chain_yields_locked_personal_left_quota() raises RequiredError when 'project_id' is missing."""
        params = {
            "project_id": "1",
        }
        params["project_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'project_id'"
        ):
            self.client.get_on_chain_yields_locked_personal_left_quota(**params)

    def test_get_on_chain_yields_locked_personal_left_quota_server_error(self):
        """Test that get_on_chain_yields_locked_personal_left_quota() raises an error when the server returns an error."""

        params = {
            "project_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.get_on_chain_yields_locked_personal_left_quota = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_on_chain_yields_locked_personal_left_quota(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_product_list_success(self, mock_get_signature):
        """Test get_on_chain_yields_locked_product_list() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "projectId": "Solv-60d",
                    "detail": {
                        "asset": "BTC",
                        "rewardAsset": "SOLV",
                        "duration": 60,
                        "renewable": True,
                        "isSoldOut": True,
                        "apr": "0.039",
                        "status": "PREHEATING",
                        "subscriptionStartTime": 1646182276000,
                        "canRedeemToFlex": True,
                    },
                    "quota": {"totalPersonalQuota": "2", "minimum": "0.001"},
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_product_list()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedProductListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedProductListResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedProductListResponse.from_dict(
                expected_response
            )
        else:
            expected = GetOnChainYieldsLockedProductListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_product_list_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_product_list() successfully with optional parameters."""

        params = {"asset": "BETH", "current": 1, "size": 10, "recv_window": 5000}

        expected_response = {
            "rows": [
                {
                    "projectId": "Solv-60d",
                    "detail": {
                        "asset": "BTC",
                        "rewardAsset": "SOLV",
                        "duration": 60,
                        "renewable": True,
                        "isSoldOut": True,
                        "apr": "0.039",
                        "status": "PREHEATING",
                        "subscriptionStartTime": 1646182276000,
                        "canRedeemToFlex": True,
                    },
                    "quota": {"totalPersonalQuota": "2", "minimum": "0.001"},
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_product_list(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/list" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedProductListResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedProductListResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedProductListResponse.from_dict(
                expected_response
            )
        else:
            expected = GetOnChainYieldsLockedProductListResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_on_chain_yields_locked_product_list_server_error(self):
        """Test that get_on_chain_yields_locked_product_list() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_on_chain_yields_locked_product_list = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_on_chain_yields_locked_product_list()

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_product_position_success(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_product_position() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "positionId": "123123",
                    "projectId": "Solv-60d",
                    "asset": "BTC",
                    "amount": "122.09202928",
                    "purchaseTime": "1646182276000",
                    "duration": "60",
                    "accrualDays": "4",
                    "rewardAsset": "SOLV",
                    "APY": "0.039",
                    "rewardAmt": "5.17181528",
                    "nextPay": "1.29295383",
                    "nextPayDate": "1646697600000",
                    "payPeriod": "1",
                    "rewardsPayDate": "1646697600000",
                    "rewardsEndDate": "1651449600000",
                    "deliverDate": "1651536000000",
                    "nextSubscriptionDate": "1651536000000",
                    "redeemingAmt": "232.2323",
                    "redeemTo": "FLEXIBLE",
                    "canRedeemEarly": True,
                    "autoSubscribe": True,
                    "type": "AUTO",
                    "status": "HOLDING",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_product_position()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/position" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedProductPositionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedProductPositionResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedProductPositionResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedProductPositionResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_product_position_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_product_position() successfully with optional parameters."""

        params = {
            "asset": "BETH",
            "position_id": 1,
            "project_id": "1",
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "positionId": "123123",
                    "projectId": "Solv-60d",
                    "asset": "BTC",
                    "amount": "122.09202928",
                    "purchaseTime": "1646182276000",
                    "duration": "60",
                    "accrualDays": "4",
                    "rewardAsset": "SOLV",
                    "APY": "0.039",
                    "rewardAmt": "5.17181528",
                    "nextPay": "1.29295383",
                    "nextPayDate": "1646697600000",
                    "payPeriod": "1",
                    "rewardsPayDate": "1646697600000",
                    "rewardsEndDate": "1651449600000",
                    "deliverDate": "1651536000000",
                    "nextSubscriptionDate": "1651536000000",
                    "redeemingAmt": "232.2323",
                    "redeemTo": "FLEXIBLE",
                    "canRedeemEarly": True,
                    "autoSubscribe": True,
                    "type": "AUTO",
                    "status": "HOLDING",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_product_position(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/position" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedProductPositionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedProductPositionResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedProductPositionResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedProductPositionResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_on_chain_yields_locked_product_position_server_error(self):
        """Test that get_on_chain_yields_locked_product_position() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_on_chain_yields_locked_product_position = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_on_chain_yields_locked_product_position()

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_redemption_record_success(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_redemption_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "positionId": "123123",
                    "redeemId": 40607,
                    "time": 1575018510000,
                    "asset": "BTC",
                    "lockPeriod": "30",
                    "amount": "21312.23223",
                    "originalAmount": "21312.23223",
                    "type": "NORMAL",
                    "deliverDate": "1575018510000",
                    "lossAmount": "0.00001232",
                    "isComplete": True,
                    "rewardAsset": "SOLV",
                    "rewardAmt": "5.17181528",
                    "status": "PAID",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_redemption_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/history/redemptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedRedemptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedRedemptionRecordResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedRedemptionRecordResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedRedemptionRecordResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_redemption_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_redemption_record() successfully with optional parameters."""

        params = {
            "position_id": 1,
            "redeem_id": "1",
            "asset": "BETH",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "positionId": "123123",
                    "redeemId": 40607,
                    "time": 1575018510000,
                    "asset": "BTC",
                    "lockPeriod": "30",
                    "amount": "21312.23223",
                    "originalAmount": "21312.23223",
                    "type": "NORMAL",
                    "deliverDate": "1575018510000",
                    "lossAmount": "0.00001232",
                    "isComplete": True,
                    "rewardAsset": "SOLV",
                    "rewardAmt": "5.17181528",
                    "status": "PAID",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_redemption_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/history/redemptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedRedemptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedRedemptionRecordResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedRedemptionRecordResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedRedemptionRecordResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_on_chain_yields_locked_redemption_record_server_error(self):
        """Test that get_on_chain_yields_locked_redemption_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_on_chain_yields_locked_redemption_record = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_on_chain_yields_locked_redemption_record()

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_rewards_history_success(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_rewards_history() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "positionId": "123123",
                    "time": 1575018510000,
                    "asset": "BNB",
                    "lockPeriod": "30",
                    "amount": "21312.23223",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_rewards_history()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/history/rewardsRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedRewardsHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedRewardsHistoryResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedRewardsHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetOnChainYieldsLockedRewardsHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_rewards_history_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_rewards_history() successfully with optional parameters."""

        params = {
            "position_id": "1",
            "asset": "BETH",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "positionId": "123123",
                    "time": 1575018510000,
                    "asset": "BNB",
                    "lockPeriod": "30",
                    "amount": "21312.23223",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_rewards_history(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/history/rewardsRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedRewardsHistoryResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedRewardsHistoryResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedRewardsHistoryResponse.from_dict(
                expected_response
            )
        else:
            expected = GetOnChainYieldsLockedRewardsHistoryResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_get_on_chain_yields_locked_rewards_history_server_error(self):
        """Test that get_on_chain_yields_locked_rewards_history() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_on_chain_yields_locked_rewards_history = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_on_chain_yields_locked_rewards_history()

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_subscription_preview_success(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_subscription_preview() successfully with required parameters only."""

        params = {
            "project_id": "1",
            "amount": 1.0,
        }

        expected_response = {
            "rewardAsset": "SOLV",
            "totalRewardAmt": "5.17181528",
            "nextPay": "1.29295383",
            "nextPayDate": "1646697600000",
            "rewardsPayDate": "1646697600000",
            "valueDate": "1646697600000",
            "rewardsEndDate": "1651449600000",
            "deliverDate": "1651536000000",
            "nextSubscriptionDate": "1651536000000",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_subscription_preview(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/subscriptionPreview"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"
        assert normalized["projectId"] == "1"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedSubscriptionPreviewResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedSubscriptionPreviewResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedSubscriptionPreviewResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedSubscriptionPreviewResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_subscription_preview_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_subscription_preview() successfully with optional parameters."""

        params = {
            "project_id": "1",
            "amount": 1.0,
            "auto_subscribe": True,
            "recv_window": 5000,
        }

        expected_response = {
            "rewardAsset": "SOLV",
            "totalRewardAmt": "5.17181528",
            "nextPay": "1.29295383",
            "nextPayDate": "1646697600000",
            "rewardsPayDate": "1646697600000",
            "valueDate": "1646697600000",
            "rewardsEndDate": "1651449600000",
            "deliverDate": "1651536000000",
            "nextSubscriptionDate": "1651536000000",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_subscription_preview(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/subscriptionPreview"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedSubscriptionPreviewResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedSubscriptionPreviewResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedSubscriptionPreviewResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedSubscriptionPreviewResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_on_chain_yields_locked_subscription_preview_missing_required_param_project_id(
        self,
    ):
        """Test that get_on_chain_yields_locked_subscription_preview() raises RequiredError when 'project_id' is missing."""
        params = {
            "project_id": "1",
            "amount": 1.0,
        }
        params["project_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'project_id'"
        ):
            self.client.get_on_chain_yields_locked_subscription_preview(**params)

    def test_get_on_chain_yields_locked_subscription_preview_missing_required_param_amount(
        self,
    ):
        """Test that get_on_chain_yields_locked_subscription_preview() raises RequiredError when 'amount' is missing."""
        params = {
            "project_id": "1",
            "amount": 1.0,
        }
        params["amount"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.get_on_chain_yields_locked_subscription_preview(**params)

    def test_get_on_chain_yields_locked_subscription_preview_server_error(self):
        """Test that get_on_chain_yields_locked_subscription_preview() raises an error when the server returns an error."""

        params = {
            "project_id": "1",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.get_on_chain_yields_locked_subscription_preview = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_on_chain_yields_locked_subscription_preview(**params)

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_subscription_record_success(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_subscription_record() successfully with required parameters only."""

        expected_response = {
            "rows": [
                {
                    "positionId": "123123",
                    "purchaseId": "26055",
                    "projectId": "Solv-60d",
                    "clientId": "ABC",
                    "time": 1575018510000,
                    "asset": "BTC",
                    "amount": "21312.23223",
                    "lockPeriod": "30",
                    "type": "AUTO",
                    "sourceAccount": "SPOT",
                    "amtFromSpot": "30",
                    "amtFromFunding": "70",
                    "status": "SUCCESS",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_subscription_record()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/history/subscriptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedSubscriptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedSubscriptionRecordResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedSubscriptionRecordResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedSubscriptionRecordResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_get_on_chain_yields_locked_subscription_record_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test get_on_chain_yields_locked_subscription_record() successfully with optional parameters."""

        params = {
            "purchase_id": "1",
            "client_id": "1",
            "asset": "BETH",
            "start_time": 1623319461670,
            "end_time": 1641782889000,
            "current": 1,
            "size": 10,
            "recv_window": 5000,
        }

        expected_response = {
            "rows": [
                {
                    "positionId": "123123",
                    "purchaseId": "26055",
                    "projectId": "Solv-60d",
                    "clientId": "ABC",
                    "time": 1575018510000,
                    "asset": "BTC",
                    "amount": "21312.23223",
                    "lockPeriod": "30",
                    "type": "AUTO",
                    "sourceAccount": "SPOT",
                    "amtFromSpot": "30",
                    "amtFromFunding": "70",
                    "status": "SUCCESS",
                }
            ],
            "total": 1,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.get_on_chain_yields_locked_subscription_record(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/history/subscriptionRecord"
            in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(GetOnChainYieldsLockedSubscriptionRecordResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(GetOnChainYieldsLockedSubscriptionRecordResponse, "from_dict")
        ):
            expected = GetOnChainYieldsLockedSubscriptionRecordResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                GetOnChainYieldsLockedSubscriptionRecordResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_get_on_chain_yields_locked_subscription_record_server_error(self):
        """Test that get_on_chain_yields_locked_subscription_record() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.get_on_chain_yields_locked_subscription_record = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.get_on_chain_yields_locked_subscription_record()

    @patch("binance_common.utils.get_signature")
    def test_on_chain_yields_account_success(self, mock_get_signature):
        """Test on_chain_yields_account() successfully with required parameters only."""

        expected_response = {
            "totalAmountInBTC": "0.01067982",
            "totalAmountInUSDT": "77.13289230",
            "totalFlexibleAmountInBTC": "0.00000000",
            "totalFlexibleAmountInUSDT": "0.00000000",
            "totalLockedInBTC": "0.01067982",
            "totalLockedInUSDT": "77.13289230",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.on_chain_yields_account()

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(OnChainYieldsAccountResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(OnChainYieldsAccountResponse, "from_dict"):
            expected = OnChainYieldsAccountResponse.from_dict(expected_response)
        else:
            expected = OnChainYieldsAccountResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_on_chain_yields_account_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test on_chain_yields_account() successfully with optional parameters."""

        params = {"recv_window": 5000}

        expected_response = {
            "totalAmountInBTC": "0.01067982",
            "totalAmountInUSDT": "77.13289230",
            "totalFlexibleAmountInBTC": "0.00000000",
            "totalFlexibleAmountInUSDT": "0.00000000",
            "totalLockedInBTC": "0.01067982",
            "totalLockedInUSDT": "77.13289230",
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.on_chain_yields_account(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/account" in request_kwargs["url"]
        assert request_kwargs["method"] == "GET"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(OnChainYieldsAccountResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif is_oneof or is_list or hasattr(OnChainYieldsAccountResponse, "from_dict"):
            expected = OnChainYieldsAccountResponse.from_dict(expected_response)
        else:
            expected = OnChainYieldsAccountResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_on_chain_yields_account_server_error(self):
        """Test that on_chain_yields_account() raises an error when the server returns an error."""

        mock_error = Exception("ResponseError")
        self.client.on_chain_yields_account = MagicMock(side_effect=mock_error)

        with pytest.raises(Exception, match="ResponseError"):
            self.client.on_chain_yields_account()

    @patch("binance_common.utils.get_signature")
    def test_redeem_on_chain_yields_locked_product_success(self, mock_get_signature):
        """Test redeem_on_chain_yields_locked_product() successfully with required parameters only."""

        params = {
            "position_id": "1",
        }

        expected_response = {"redeemId": 40607, "success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.redeem_on_chain_yields_locked_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/redeem" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["positionId"] == "1"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RedeemOnChainYieldsLockedProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(RedeemOnChainYieldsLockedProductResponse, "from_dict")
        ):
            expected = RedeemOnChainYieldsLockedProductResponse.from_dict(
                expected_response
            )
        else:
            expected = RedeemOnChainYieldsLockedProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_redeem_on_chain_yields_locked_product_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test redeem_on_chain_yields_locked_product() successfully with optional parameters."""

        params = {"position_id": "1", "channel_id": "1", "recv_window": 5000}

        expected_response = {"redeemId": 40607, "success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.redeem_on_chain_yields_locked_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/redeem" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(RedeemOnChainYieldsLockedProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(RedeemOnChainYieldsLockedProductResponse, "from_dict")
        ):
            expected = RedeemOnChainYieldsLockedProductResponse.from_dict(
                expected_response
            )
        else:
            expected = RedeemOnChainYieldsLockedProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_redeem_on_chain_yields_locked_product_missing_required_param_position_id(
        self,
    ):
        """Test that redeem_on_chain_yields_locked_product() raises RequiredError when 'position_id' is missing."""
        params = {
            "position_id": "1",
        }
        params["position_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'position_id'"
        ):
            self.client.redeem_on_chain_yields_locked_product(**params)

    def test_redeem_on_chain_yields_locked_product_server_error(self):
        """Test that redeem_on_chain_yields_locked_product() raises an error when the server returns an error."""

        params = {
            "position_id": "1",
        }

        mock_error = Exception("ResponseError")
        self.client.redeem_on_chain_yields_locked_product = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.redeem_on_chain_yields_locked_product(**params)

    @patch("binance_common.utils.get_signature")
    def test_set_on_chain_yields_locked_auto_subscribe_success(
        self, mock_get_signature
    ):
        """Test set_on_chain_yields_locked_auto_subscribe() successfully with required parameters only."""

        params = {
            "position_id": "1",
            "auto_subscribe": True,
        }

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_on_chain_yields_locked_auto_subscribe(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/setAutoSubscribe" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "POST"
        assert normalized["positionId"] == "1"
        assert normalized["autoSubscribe"] is True

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetOnChainYieldsLockedAutoSubscribeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(SetOnChainYieldsLockedAutoSubscribeResponse, "from_dict")
        ):
            expected = SetOnChainYieldsLockedAutoSubscribeResponse.from_dict(
                expected_response
            )
        else:
            expected = SetOnChainYieldsLockedAutoSubscribeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_set_on_chain_yields_locked_auto_subscribe_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test set_on_chain_yields_locked_auto_subscribe() successfully with optional parameters."""

        params = {"position_id": "1", "auto_subscribe": True, "recv_window": 5000}

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_on_chain_yields_locked_auto_subscribe(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert (
            "/sapi/v1/onchain-yields/locked/setAutoSubscribe" in request_kwargs["url"]
        )
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetOnChainYieldsLockedAutoSubscribeResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(SetOnChainYieldsLockedAutoSubscribeResponse, "from_dict")
        ):
            expected = SetOnChainYieldsLockedAutoSubscribeResponse.from_dict(
                expected_response
            )
        else:
            expected = SetOnChainYieldsLockedAutoSubscribeResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_set_on_chain_yields_locked_auto_subscribe_missing_required_param_position_id(
        self,
    ):
        """Test that set_on_chain_yields_locked_auto_subscribe() raises RequiredError when 'position_id' is missing."""
        params = {
            "position_id": "1",
            "auto_subscribe": True,
        }
        params["position_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'position_id'"
        ):
            self.client.set_on_chain_yields_locked_auto_subscribe(**params)

    def test_set_on_chain_yields_locked_auto_subscribe_missing_required_param_auto_subscribe(
        self,
    ):
        """Test that set_on_chain_yields_locked_auto_subscribe() raises RequiredError when 'auto_subscribe' is missing."""
        params = {
            "position_id": "1",
            "auto_subscribe": True,
        }
        params["auto_subscribe"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'auto_subscribe'"
        ):
            self.client.set_on_chain_yields_locked_auto_subscribe(**params)

    def test_set_on_chain_yields_locked_auto_subscribe_server_error(self):
        """Test that set_on_chain_yields_locked_auto_subscribe() raises an error when the server returns an error."""

        params = {
            "position_id": "1",
            "auto_subscribe": True,
        }

        mock_error = Exception("ResponseError")
        self.client.set_on_chain_yields_locked_auto_subscribe = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.set_on_chain_yields_locked_auto_subscribe(**params)

    @patch("binance_common.utils.get_signature")
    def test_set_on_chain_yields_locked_product_redeem_option_success(
        self, mock_get_signature
    ):
        """Test set_on_chain_yields_locked_product_redeem_option() successfully with required parameters only."""

        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
        }

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_on_chain_yields_locked_product_redeem_option(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/setRedeemOption" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["positionId"] == "1"
        assert normalized["redeemTo"] == "redeem_to_example"

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetOnChainYieldsLockedProductRedeemOptionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(SetOnChainYieldsLockedProductRedeemOptionResponse, "from_dict")
        ):
            expected = SetOnChainYieldsLockedProductRedeemOptionResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                SetOnChainYieldsLockedProductRedeemOptionResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_set_on_chain_yields_locked_product_redeem_option_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test set_on_chain_yields_locked_product_redeem_option() successfully with optional parameters."""

        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
            "recv_window": 5000,
        }

        expected_response = {"success": True}
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.set_on_chain_yields_locked_product_redeem_option(
            **params
        )

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/setRedeemOption" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SetOnChainYieldsLockedProductRedeemOptionResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(SetOnChainYieldsLockedProductRedeemOptionResponse, "from_dict")
        ):
            expected = SetOnChainYieldsLockedProductRedeemOptionResponse.from_dict(
                expected_response
            )
        else:
            expected = (
                SetOnChainYieldsLockedProductRedeemOptionResponse.model_validate_json(
                    json.dumps(expected_response)
                )
            )

        assert response.data() == expected

    def test_set_on_chain_yields_locked_product_redeem_option_missing_required_param_position_id(
        self,
    ):
        """Test that set_on_chain_yields_locked_product_redeem_option() raises RequiredError when 'position_id' is missing."""
        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
        }
        params["position_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'position_id'"
        ):
            self.client.set_on_chain_yields_locked_product_redeem_option(**params)

    def test_set_on_chain_yields_locked_product_redeem_option_missing_required_param_redeem_to(
        self,
    ):
        """Test that set_on_chain_yields_locked_product_redeem_option() raises RequiredError when 'redeem_to' is missing."""
        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
        }
        params["redeem_to"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'redeem_to'"
        ):
            self.client.set_on_chain_yields_locked_product_redeem_option(**params)

    def test_set_on_chain_yields_locked_product_redeem_option_server_error(self):
        """Test that set_on_chain_yields_locked_product_redeem_option() raises an error when the server returns an error."""

        params = {
            "position_id": "1",
            "redeem_to": "redeem_to_example",
        }

        mock_error = Exception("ResponseError")
        self.client.set_on_chain_yields_locked_product_redeem_option = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.set_on_chain_yields_locked_product_redeem_option(**params)

    @patch("binance_common.utils.get_signature")
    def test_subscribe_on_chain_yields_locked_product_success(self, mock_get_signature):
        """Test subscribe_on_chain_yields_locked_product() successfully with required parameters only."""

        params = {
            "project_id": "1",
            "amount": 1.0,
        }

        expected_response = {
            "purchaseId": 40607,
            "positionId": "12345",
            "amount": "75.46000000",
            "success": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.subscribe_on_chain_yields_locked_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs
        parsed_params = parse_qs(request_kwargs["params"])
        camel_case_params = {snake_to_camel(k): v for k, v in params.items()}
        normalized = normalize_query_values(parsed_params, camel_case_params)

        self.mock_session.request.assert_called_once()
        mock_get_signature.assert_called_once()

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/subscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"
        assert normalized["projectId"] == "1"
        assert normalized["amount"] == 1.0

        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SubscribeOnChainYieldsLockedProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(SubscribeOnChainYieldsLockedProductResponse, "from_dict")
        ):
            expected = SubscribeOnChainYieldsLockedProductResponse.from_dict(
                expected_response
            )
        else:
            expected = SubscribeOnChainYieldsLockedProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    @patch("binance_common.utils.get_signature")
    def test_subscribe_on_chain_yields_locked_product_success_with_optional_params(
        self, mock_get_signature
    ):
        """Test subscribe_on_chain_yields_locked_product() successfully with optional parameters."""

        params = {
            "project_id": "1",
            "amount": 1.0,
            "auto_subscribe": True,
            "source_account": "SPOT",
            "redeem_to": "",
            "channel_id": "1",
            "client_id": "1",
            "recv_window": 5000,
        }

        expected_response = {
            "purchaseId": 40607,
            "positionId": "12345",
            "amount": "75.46000000",
            "success": True,
        }
        mock_get_signature.return_value = "mocked_signature"
        self.set_mock_response(expected_response)

        response = self.client.subscribe_on_chain_yields_locked_product(**params)

        actual_call_args = self.mock_session.request.call_args
        request_kwargs = actual_call_args.kwargs

        assert "url" in request_kwargs
        assert "signature" in parse_qs(request_kwargs["params"])
        assert "/sapi/v1/onchain-yields/locked/subscribe" in request_kwargs["url"]
        assert request_kwargs["method"] == "POST"

        self.mock_session.request.assert_called_once()
        assert response is not None
        is_list = isinstance(expected_response, list)
        is_flat_list = (
            is_list and not isinstance(expected_response[0], list) if is_list else False
        )
        is_oneof = is_one_of_model(SubscribeOnChainYieldsLockedProductResponse)

        if is_list and not is_flat_list:
            expected = expected_response
        elif (
            is_oneof
            or is_list
            or hasattr(SubscribeOnChainYieldsLockedProductResponse, "from_dict")
        ):
            expected = SubscribeOnChainYieldsLockedProductResponse.from_dict(
                expected_response
            )
        else:
            expected = SubscribeOnChainYieldsLockedProductResponse.model_validate_json(
                json.dumps(expected_response)
            )

        assert response.data() == expected

    def test_subscribe_on_chain_yields_locked_product_missing_required_param_project_id(
        self,
    ):
        """Test that subscribe_on_chain_yields_locked_product() raises RequiredError when 'project_id' is missing."""
        params = {
            "project_id": "1",
            "amount": 1.0,
        }
        params["project_id"] = None

        with pytest.raises(
            RequiredError, match="Missing required parameter 'project_id'"
        ):
            self.client.subscribe_on_chain_yields_locked_product(**params)

    def test_subscribe_on_chain_yields_locked_product_missing_required_param_amount(
        self,
    ):
        """Test that subscribe_on_chain_yields_locked_product() raises RequiredError when 'amount' is missing."""
        params = {
            "project_id": "1",
            "amount": 1.0,
        }
        params["amount"] = None

        with pytest.raises(RequiredError, match="Missing required parameter 'amount'"):
            self.client.subscribe_on_chain_yields_locked_product(**params)

    def test_subscribe_on_chain_yields_locked_product_server_error(self):
        """Test that subscribe_on_chain_yields_locked_product() raises an error when the server returns an error."""

        params = {
            "project_id": "1",
            "amount": 1.0,
        }

        mock_error = Exception("ResponseError")
        self.client.subscribe_on_chain_yields_locked_product = MagicMock(
            side_effect=mock_error
        )

        with pytest.raises(Exception, match="ResponseError"):
            self.client.subscribe_on_chain_yields_locked_product(**params)
